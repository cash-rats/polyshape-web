{"version":3,"file":"trianglify.bundle.js","sources":["../node_modules/robust-predicates/esm/util.js","../node_modules/robust-predicates/esm/orient2d.js","../node_modules/delaunator/index.js","../node_modules/chroma-js/src/utils/limit.js","../node_modules/chroma-js/src/utils/clip_rgb.js","../node_modules/chroma-js/src/utils/type.js","../node_modules/chroma-js/src/utils/unpack.js","../node_modules/chroma-js/src/utils/last.js","../node_modules/chroma-js/src/utils/index.js","../node_modules/chroma-js/src/io/input.js","../node_modules/chroma-js/src/Color.js","../node_modules/chroma-js/src/version.js","../node_modules/chroma-js/src/chroma.js","../node_modules/chroma-js/src/io/cmyk/cmyk2rgb.js","../node_modules/chroma-js/src/io/cmyk/rgb2cmyk.js","../node_modules/chroma-js/src/io/cmyk/index.js","../node_modules/chroma-js/src/io/css/hsl2css.js","../node_modules/chroma-js/src/io/hsl/rgb2hsl.js","../node_modules/chroma-js/src/io/css/rgb2css.js","../node_modules/chroma-js/src/io/hsl/hsl2rgb.js","../node_modules/chroma-js/src/io/css/css2rgb.js","../node_modules/chroma-js/src/io/css/index.js","../node_modules/chroma-js/src/io/gl/index.js","../node_modules/chroma-js/src/io/hcg/hcg2rgb.js","../node_modules/chroma-js/src/io/hcg/rgb2hcg.js","../node_modules/chroma-js/src/io/hcg/index.js","../node_modules/chroma-js/src/io/hex/hex2rgb.js","../node_modules/chroma-js/src/io/hex/rgb2hex.js","../node_modules/chroma-js/src/io/hex/index.js","../node_modules/chroma-js/src/io/hsi/hsi2rgb.js","../node_modules/chroma-js/src/io/hsi/rgb2hsi.js","../node_modules/chroma-js/src/io/hsi/index.js","../node_modules/chroma-js/src/io/hsl/index.js","../node_modules/chroma-js/src/io/hsv/hsv2rgb.js","../node_modules/chroma-js/src/io/hsv/rgb2hsv.js","../node_modules/chroma-js/src/io/hsv/index.js","../node_modules/chroma-js/src/io/lab/lab-constants.js","../node_modules/chroma-js/src/io/lab/lab2rgb.js","../node_modules/chroma-js/src/io/lab/rgb2lab.js","../node_modules/chroma-js/src/io/lab/index.js","../node_modules/chroma-js/src/io/lch/lch2lab.js","../node_modules/chroma-js/src/io/lch/lch2rgb.js","../node_modules/chroma-js/src/io/lch/hcl2rgb.js","../node_modules/chroma-js/src/io/lch/lab2lch.js","../node_modules/chroma-js/src/io/lch/rgb2lch.js","../node_modules/chroma-js/src/io/lch/index.js","../node_modules/chroma-js/src/colors/w3cx11.js","../node_modules/chroma-js/src/io/named/index.js","../node_modules/chroma-js/src/io/num/num2rgb.js","../node_modules/chroma-js/src/io/num/rgb2num.js","../node_modules/chroma-js/src/io/num/index.js","../node_modules/chroma-js/src/io/rgb/index.js","../node_modules/chroma-js/src/io/temp/temperature2rgb.js","../node_modules/chroma-js/src/io/temp/rgb2temperature.js","../node_modules/chroma-js/src/io/temp/index.js","../node_modules/chroma-js/src/io/oklab/oklab2rgb.js","../node_modules/chroma-js/src/io/oklab/rgb2oklab.js","../node_modules/chroma-js/src/io/oklab/index.js","../node_modules/chroma-js/src/io/oklch/oklch2rgb.js","../node_modules/chroma-js/src/io/oklch/rgb2oklch.js","../node_modules/chroma-js/src/io/oklch/index.js","../node_modules/chroma-js/src/ops/alpha.js","../node_modules/chroma-js/src/ops/clipped.js","../node_modules/chroma-js/src/ops/darken.js","../node_modules/chroma-js/src/ops/get.js","../node_modules/chroma-js/src/ops/luminance.js","../node_modules/chroma-js/src/interpolator/index.js","../node_modules/chroma-js/src/generator/mix.js","../node_modules/chroma-js/src/ops/mix.js","../node_modules/chroma-js/src/ops/premultiply.js","../node_modules/chroma-js/src/ops/saturate.js","../node_modules/chroma-js/src/ops/set.js","../node_modules/chroma-js/src/ops/shade.js","../node_modules/chroma-js/src/interpolator/rgb.js","../node_modules/chroma-js/src/interpolator/lrgb.js","../node_modules/chroma-js/src/interpolator/lab.js","../node_modules/chroma-js/src/interpolator/_hsx.js","../node_modules/chroma-js/src/interpolator/lch.js","../node_modules/chroma-js/src/interpolator/num.js","../node_modules/chroma-js/src/interpolator/hcg.js","../node_modules/chroma-js/src/interpolator/hsi.js","../node_modules/chroma-js/src/interpolator/hsl.js","../node_modules/chroma-js/src/interpolator/hsv.js","../node_modules/chroma-js/src/interpolator/oklab.js","../node_modules/chroma-js/src/interpolator/oklch.js","../node_modules/chroma-js/src/generator/average.js","../node_modules/chroma-js/src/generator/scale.js","../node_modules/chroma-js/src/generator/bezier.js","../node_modules/chroma-js/src/generator/blend.js","../node_modules/chroma-js/src/generator/cubehelix.js","../node_modules/chroma-js/src/generator/random.js","../node_modules/chroma-js/src/utils/analyze.js","../node_modules/chroma-js/src/utils/contrast.js","../node_modules/chroma-js/src/utils/delta-e.js","../node_modules/chroma-js/src/utils/distance.js","../node_modules/chroma-js/src/utils/valid.js","../node_modules/chroma-js/src/utils/scales.js","../node_modules/chroma-js/src/colors/colorbrewer.js","../node_modules/chroma-js/index.js","../src/utils/colorbrewer.js","../node_modules/canvas/browser.js","../src/utils/getScalingRatio.js","../src/pattern.js","../src/utils/mulberry32.js","../src/utils/geom.js","../src/utils/colorFunctions.js","../src/trianglify.js"],"sourcesContent":["export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n","\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nimport {orient2d} from 'robust-predicates';\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        // find the point closest to the seed\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                const d = this._dists[id];\n                if (d > d0) {\n                    hull[j++] = id;\n                    d0 = d;\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","import { min, max } from './index.js';\n\nexport default (x, low = 0, high = 1) => {\n    return min(max(low, x), high);\n};\n","import limit from './limit.js';\n\nexport default (rgb) => {\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (let i = 0; i <= 3; i++) {\n        if (i < 3) {\n            if (rgb[i] < 0 || rgb[i] > 255) rgb._clipped = true;\n            rgb[i] = limit(rgb[i], 0, 255);\n        } else if (i === 3) {\n            rgb[i] = limit(rgb[i], 0, 1);\n        }\n    }\n    return rgb;\n};\n","// ported from jQuery's $.type\nconst classToType = {};\nfor (let name of [\n    'Boolean',\n    'Number',\n    'String',\n    'Function',\n    'Array',\n    'Date',\n    'RegExp',\n    'Undefined',\n    'Null'\n]) {\n    classToType[`[object ${name}]`] = name.toLowerCase();\n}\nexport default function (obj) {\n    return classToType[Object.prototype.toString.call(obj)] || 'object';\n}\n","import type from './type.js';\n\nexport default (args, keyOrder = null) => {\n    // if called with more than 3 arguments, we return the arguments\n    if (args.length >= 3) return Array.prototype.slice.call(args);\n    // with less than 3 args we check if first arg is object\n    // and use the keyOrder string to extract and sort properties\n    if (type(args[0]) == 'object' && keyOrder) {\n        return keyOrder\n            .split('')\n            .filter((k) => args[0][k] !== undefined)\n            .map((k) => args[0][k]);\n    }\n    // otherwise we just return the first argument\n    // (which we suppose is an array of args)\n    return args[0];\n};\n","import type from './type.js';\n\nexport default (args) => {\n    if (args.length < 2) return null;\n    const l = args.length - 1;\n    if (type(args[l]) == 'string') return args[l].toLowerCase();\n    return null;\n};\n","const { PI, min, max } = Math;\n\nexport { default as clip_rgb } from './clip_rgb.js';\nexport { default as limit } from './limit.js';\nexport { default as type } from './type.js';\nexport { default as unpack } from './unpack.js';\nexport { default as last } from './last.js';\n\nconst TWOPI = PI * 2;\nconst PITHIRD = PI / 3;\nconst DEG2RAD = PI / 180;\nconst RAD2DEG = 180 / PI;\n\nexport { PI, TWOPI, PITHIRD, DEG2RAD, RAD2DEG, min, max };\n","export default {\n    format: {},\n    autodetect: []\n};\n","import { last, clip_rgb, type } from './utils/index.js';\nimport _input from './io/input.js';\n\nclass Color {\n    constructor(...args) {\n        const me = this;\n        if (\n            type(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor\n        ) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n        // last argument could be the mode\n        let mode = last(args);\n        let autodetect = false;\n        if (!mode) {\n            autodetect = true;\n            if (!_input.sorted) {\n                _input.autodetect = _input.autodetect.sort((a, b) => b.p - a.p);\n                _input.sorted = true;\n            }\n            // auto-detect format\n            for (let chk of _input.autodetect) {\n                mode = chk.test(...args);\n                if (mode) break;\n            }\n        }\n        if (_input.format[mode]) {\n            const rgb = _input.format[mode].apply(\n                null,\n                autodetect ? args : args.slice(0, -1)\n            );\n            me._rgb = clip_rgb(rgb);\n        } else {\n            throw new Error('unknown format: ' + args);\n        }\n        // add alpha channel\n        if (me._rgb.length === 3) me._rgb.push(1);\n    }\n    toString() {\n        if (type(this.hex) == 'function') return this.hex();\n        return `[${this._rgb.join(',')}]`;\n    }\n}\nexport default Color;\n","// this gets updated automatically\nexport const version = '2.6.0';\n","import Color from './Color.js';\nimport { version } from './version.js';\n\nconst chroma = (...args) => {\n    return new chroma.Color(...args);\n};\n\nchroma.Color = Color;\nchroma.version = version;\n\nexport default chroma;\n","import { unpack } from '../../utils/index.js';\n\nconst cmyk2rgb = (...args) => {\n    args = unpack(args, 'cmyk');\n    const [c, m, y, k] = args;\n    const alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) return [0, 0, 0, alpha];\n    return [\n        c >= 1 ? 0 : 255 * (1 - c) * (1 - k), // r\n        m >= 1 ? 0 : 255 * (1 - m) * (1 - k), // g\n        y >= 1 ? 0 : 255 * (1 - y) * (1 - k), // b\n        alpha\n    ];\n};\n\nexport default cmyk2rgb;\n","import { unpack } from '../../utils/index.js';\nconst { max } = Math;\n\nconst rgb2cmyk = (...args) => {\n    let [r, g, b] = unpack(args, 'rgb');\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    const k = 1 - max(r, max(g, b));\n    const f = k < 1 ? 1 / (1 - k) : 0;\n    const c = (1 - r - k) * f;\n    const m = (1 - g - k) * f;\n    const y = (1 - b - k) * f;\n    return [c, m, y, k];\n};\n\nexport default rgb2cmyk;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { unpack, type } from '../../utils/index.js';\nimport cmyk2rgb from './cmyk2rgb.js';\nimport rgb2cmyk from './rgb2cmyk.js';\n\nColor.prototype.cmyk = function () {\n    return rgb2cmyk(this._rgb);\n};\n\nchroma.cmyk = (...args) => new Color(...args, 'cmyk');\n\ninput.format.cmyk = cmyk2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'cmyk');\n        if (type(args) === 'array' && args.length === 4) {\n            return 'cmyk';\n        }\n    }\n});\n","import { unpack, last } from '../../utils/index.js';\nconst rnd = (a) => Math.round(a * 100) / 100;\n\n/*\n * supported arguments:\n * - hsl2css(h,s,l)\n * - hsl2css(h,s,l,a)\n * - hsl2css([h,s,l], mode)\n * - hsl2css([h,s,l,a], mode)\n * - hsl2css({h,s,l,a}, mode)\n */\nconst hsl2css = (...args) => {\n    const hsla = unpack(args, 'hsla');\n    let mode = last(args) || 'lsa';\n    hsla[0] = rnd(hsla[0] || 0);\n    hsla[1] = rnd(hsla[1] * 100) + '%';\n    hsla[2] = rnd(hsla[2] * 100) + '%';\n    if (mode === 'hsla' || (hsla.length > 3 && hsla[3] < 1)) {\n        hsla[3] = hsla.length > 3 ? hsla[3] : 1;\n        mode = 'hsla';\n    } else {\n        hsla.length = 3;\n    }\n    return `${mode}(${hsla.join(',')})`;\n};\n\nexport default hsl2css;\n","import { unpack, min, max } from '../../utils/index.js';\n\n/*\n * supported arguments:\n * - rgb2hsl(r,g,b)\n * - rgb2hsl(r,g,b,a)\n * - rgb2hsl([r,g,b])\n * - rgb2hsl([r,g,b,a])\n * - rgb2hsl({r,g,b,a})\n */\nconst rgb2hsl = (...args) => {\n    args = unpack(args, 'rgba');\n    let [r, g, b] = args;\n\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    const minRgb = min(r, g, b);\n    const maxRgb = max(r, g, b);\n\n    const l = (maxRgb + minRgb) / 2;\n    let s, h;\n\n    if (maxRgb === minRgb) {\n        s = 0;\n        h = Number.NaN;\n    } else {\n        s =\n            l < 0.5\n                ? (maxRgb - minRgb) / (maxRgb + minRgb)\n                : (maxRgb - minRgb) / (2 - maxRgb - minRgb);\n    }\n\n    if (r == maxRgb) h = (g - b) / (maxRgb - minRgb);\n    else if (g == maxRgb) h = 2 + (b - r) / (maxRgb - minRgb);\n    else if (b == maxRgb) h = 4 + (r - g) / (maxRgb - minRgb);\n\n    h *= 60;\n    if (h < 0) h += 360;\n    if (args.length > 3 && args[3] !== undefined) return [h, s, l, args[3]];\n    return [h, s, l];\n};\n\nexport default rgb2hsl;\n","import { unpack, last } from '../../utils/index.js';\nimport hsl2css from './hsl2css.js';\nimport rgb2hsl from '../hsl/rgb2hsl.js';\nconst { round } = Math;\n\n/*\n * supported arguments:\n * - rgb2css(r,g,b)\n * - rgb2css(r,g,b,a)\n * - rgb2css([r,g,b], mode)\n * - rgb2css([r,g,b,a], mode)\n * - rgb2css({r,g,b,a}, mode)\n */\nconst rgb2css = (...args) => {\n    const rgba = unpack(args, 'rgba');\n    let mode = last(args) || 'rgb';\n    if (mode.substr(0, 3) == 'hsl') {\n        return hsl2css(rgb2hsl(rgba), mode);\n    }\n    rgba[0] = round(rgba[0]);\n    rgba[1] = round(rgba[1]);\n    rgba[2] = round(rgba[2]);\n    if (mode === 'rgba' || (rgba.length > 3 && rgba[3] < 1)) {\n        rgba[3] = rgba.length > 3 ? rgba[3] : 1;\n        mode = 'rgba';\n    }\n    return `${mode}(${rgba.slice(0, mode === 'rgb' ? 3 : 4).join(',')})`;\n};\n\nexport default rgb2css;\n","import { unpack } from '../../utils/index.js';\nconst { round } = Math;\n\nconst hsl2rgb = (...args) => {\n    args = unpack(args, 'hsl');\n    const [h, s, l] = args;\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l * 255;\n    } else {\n        const t3 = [0, 0, 0];\n        const c = [0, 0, 0];\n        const t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const t1 = 2 * l - t2;\n        const h_ = h / 360;\n        t3[0] = h_ + 1 / 3;\n        t3[1] = h_;\n        t3[2] = h_ - 1 / 3;\n        for (let i = 0; i < 3; i++) {\n            if (t3[i] < 0) t3[i] += 1;\n            if (t3[i] > 1) t3[i] -= 1;\n            if (6 * t3[i] < 1) c[i] = t1 + (t2 - t1) * 6 * t3[i];\n            else if (2 * t3[i] < 1) c[i] = t2;\n            else if (3 * t3[i] < 2) c[i] = t1 + (t2 - t1) * (2 / 3 - t3[i]) * 6;\n            else c[i] = t1;\n        }\n        [r, g, b] = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)];\n    }\n    if (args.length > 3) {\n        // keep alpha channel\n        return [r, g, b, args[3]];\n    }\n    return [r, g, b, 1];\n};\n\nexport default hsl2rgb;\n","import hsl2rgb from '../hsl/hsl2rgb.js';\nimport input from '../input.js';\n\nconst RE_RGB = /^rgb\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*\\)$/;\nconst RE_RGBA =\n    /^rgba\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\nconst RE_RGB_PCT =\n    /^rgb\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\nconst RE_RGBA_PCT =\n    /^rgba\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\nconst RE_HSL =\n    /^hsl\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\nconst RE_HSLA =\n    /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\nconst { round } = Math;\n\nconst css2rgb = (css) => {\n    css = css.toLowerCase().trim();\n    let m;\n\n    if (input.format.named) {\n        try {\n            return input.format.named(css);\n            // eslint-disable-next-line\n        } catch (e) {}\n    }\n\n    // rgb(250,20,0)\n    if ((m = css.match(RE_RGB))) {\n        const rgb = m.slice(1, 4);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = +rgb[i];\n        }\n        rgb[3] = 1; // default alpha\n        return rgb;\n    }\n\n    // rgba(250,20,0,0.4)\n    if ((m = css.match(RE_RGBA))) {\n        const rgb = m.slice(1, 5);\n        for (let i = 0; i < 4; i++) {\n            rgb[i] = +rgb[i];\n        }\n        return rgb;\n    }\n\n    // rgb(100%,0%,0%)\n    if ((m = css.match(RE_RGB_PCT))) {\n        const rgb = m.slice(1, 4);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = round(rgb[i] * 2.55);\n        }\n        rgb[3] = 1; // default alpha\n        return rgb;\n    }\n\n    // rgba(100%,0%,0%,0.4)\n    if ((m = css.match(RE_RGBA_PCT))) {\n        const rgb = m.slice(1, 5);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = round(rgb[i] * 2.55);\n        }\n        rgb[3] = +rgb[3];\n        return rgb;\n    }\n\n    // hsl(0,100%,50%)\n    if ((m = css.match(RE_HSL))) {\n        const hsl = m.slice(1, 4);\n        hsl[1] *= 0.01;\n        hsl[2] *= 0.01;\n        const rgb = hsl2rgb(hsl);\n        rgb[3] = 1;\n        return rgb;\n    }\n\n    // hsla(0,100%,50%,0.5)\n    if ((m = css.match(RE_HSLA))) {\n        const hsl = m.slice(1, 4);\n        hsl[1] *= 0.01;\n        hsl[2] *= 0.01;\n        const rgb = hsl2rgb(hsl);\n        rgb[3] = +m[4]; // default alpha = 1\n        return rgb;\n    }\n};\n\ncss2rgb.test = (s) => {\n    return (\n        RE_RGB.test(s) ||\n        RE_RGBA.test(s) ||\n        RE_RGB_PCT.test(s) ||\n        RE_RGBA_PCT.test(s) ||\n        RE_HSL.test(s) ||\n        RE_HSLA.test(s)\n    );\n};\n\nexport default css2rgb;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { type } from '../../utils/index.js';\n\nimport rgb2css from './rgb2css.js';\nimport css2rgb from './css2rgb.js';\n\nColor.prototype.css = function (mode) {\n    return rgb2css(this._rgb, mode);\n};\n\nchroma.css = (...args) => new Color(...args, 'css');\n\ninput.format.css = css2rgb;\n\ninput.autodetect.push({\n    p: 5,\n    test: (h, ...rest) => {\n        if (!rest.length && type(h) === 'string' && css2rgb.test(h)) {\n            return 'css';\n        }\n    }\n});\n","import Color from '../../Color.js';\nimport chroma from '../../chroma.js';\nimport input from '../input.js';\nimport { unpack } from '../../utils/index.js';\n\ninput.format.gl = (...args) => {\n    const rgb = unpack(args, 'rgba');\n    rgb[0] *= 255;\n    rgb[1] *= 255;\n    rgb[2] *= 255;\n    return rgb;\n};\n\nchroma.gl = (...args) => new Color(...args, 'gl');\n\nColor.prototype.gl = function () {\n    const rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n};\n","import { unpack } from '../../utils/index.js';\nconst { floor } = Math;\n\n/*\n * this is basically just HSV with some minor tweaks\n *\n * hue.. [0..360]\n * chroma .. [0..1]\n * grayness .. [0..1]\n */\n\nconst hcg2rgb = (...args) => {\n    args = unpack(args, 'hcg');\n    let [h, c, _g] = args;\n    let r, g, b;\n    _g = _g * 255;\n    const _c = c * 255;\n    if (c === 0) {\n        r = g = b = _g;\n    } else {\n        if (h === 360) h = 0;\n        if (h > 360) h -= 360;\n        if (h < 0) h += 360;\n        h /= 60;\n        const i = floor(h);\n        const f = h - i;\n        const p = _g * (1 - c);\n        const q = p + _c * (1 - f);\n        const t = p + _c * f;\n        const v = p + _c;\n        switch (i) {\n            case 0:\n                [r, g, b] = [v, t, p];\n                break;\n            case 1:\n                [r, g, b] = [q, v, p];\n                break;\n            case 2:\n                [r, g, b] = [p, v, t];\n                break;\n            case 3:\n                [r, g, b] = [p, q, v];\n                break;\n            case 4:\n                [r, g, b] = [t, p, v];\n                break;\n            case 5:\n                [r, g, b] = [v, p, q];\n                break;\n        }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nexport default hcg2rgb;\n","import { unpack, max, min } from '../../utils/index.js';\n\nconst rgb2hcg = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    const minRgb = min(r, g, b);\n    const maxRgb = max(r, g, b);\n    const delta = maxRgb - minRgb;\n    const c = (delta * 100) / 255;\n    const _g = (minRgb / (255 - delta)) * 100;\n    let h;\n    if (delta === 0) {\n        h = Number.NaN;\n    } else {\n        if (r === maxRgb) h = (g - b) / delta;\n        if (g === maxRgb) h = 2 + (b - r) / delta;\n        if (b === maxRgb) h = 4 + (r - g) / delta;\n        h *= 60;\n        if (h < 0) h += 360;\n    }\n    return [h, c, _g];\n};\n\nexport default rgb2hcg;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hcg2rgb from './hcg2rgb.js';\nimport rgb2hcg from './rgb2hcg.js';\n\nColor.prototype.hcg = function () {\n    return rgb2hcg(this._rgb);\n};\n\nchroma.hcg = (...args) => new Color(...args, 'hcg');\n\ninput.format.hcg = hcg2rgb;\n\ninput.autodetect.push({\n    p: 1,\n    test: (...args) => {\n        args = unpack(args, 'hcg');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hcg';\n        }\n    }\n});\n","const RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\nconst RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\nconst hex2rgb = (hex) => {\n    if (hex.match(RE_HEX)) {\n        // remove optional leading #\n        if (hex.length === 4 || hex.length === 7) {\n            hex = hex.substr(1);\n        }\n        // expand short-notation to full six-digit\n        if (hex.length === 3) {\n            hex = hex.split('');\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        const u = parseInt(hex, 16);\n        const r = u >> 16;\n        const g = (u >> 8) & 0xff;\n        const b = u & 0xff;\n        return [r, g, b, 1];\n    }\n\n    // match rgba hex format, eg #FF000077\n    if (hex.match(RE_HEXA)) {\n        if (hex.length === 5 || hex.length === 9) {\n            // remove optional leading #\n            hex = hex.substr(1);\n        }\n        // expand short-notation to full eight-digit\n        if (hex.length === 4) {\n            hex = hex.split('');\n            hex =\n                hex[0] +\n                hex[0] +\n                hex[1] +\n                hex[1] +\n                hex[2] +\n                hex[2] +\n                hex[3] +\n                hex[3];\n        }\n        const u = parseInt(hex, 16);\n        const r = (u >> 24) & 0xff;\n        const g = (u >> 16) & 0xff;\n        const b = (u >> 8) & 0xff;\n        const a = Math.round(((u & 0xff) / 0xff) * 100) / 100;\n        return [r, g, b, a];\n    }\n\n    // we used to check for css colors here\n    // if _input.css? and rgb = _input.css hex\n    //     return rgb\n\n    throw new Error(`unknown hex color: ${hex}`);\n};\n\nexport default hex2rgb;\n","import { unpack, last } from '../../utils/index.js';\nconst { round } = Math;\n\nconst rgb2hex = (...args) => {\n    let [r, g, b, a] = unpack(args, 'rgba');\n    let mode = last(args) || 'auto';\n    if (a === undefined) a = 1;\n    if (mode === 'auto') {\n        mode = a < 1 ? 'rgba' : 'rgb';\n    }\n    r = round(r);\n    g = round(g);\n    b = round(b);\n    const u = (r << 16) | (g << 8) | b;\n    let str = '000000' + u.toString(16); //#.toUpperCase();\n    str = str.substr(str.length - 6);\n    let hxa = '0' + round(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    switch (mode.toLowerCase()) {\n        case 'rgba':\n            return `#${str}${hxa}`;\n        case 'argb':\n            return `#${hxa}${str}`;\n        default:\n            return `#${str}`;\n    }\n};\n\nexport default rgb2hex;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport { type } from '../../utils/index.js';\nimport input from '../input.js';\nimport hex2rgb from './hex2rgb.js';\nimport rgb2hex from './rgb2hex.js';\n\nColor.prototype.hex = function (mode) {\n    return rgb2hex(this._rgb, mode);\n};\n\nchroma.hex = (...args) => new Color(...args, 'hex');\n\ninput.format.hex = hex2rgb;\ninput.autodetect.push({\n    p: 4,\n    test: (h, ...rest) => {\n        if (\n            !rest.length &&\n            type(h) === 'string' &&\n            [3, 4, 5, 6, 7, 8, 9].indexOf(h.length) >= 0\n        ) {\n            return 'hex';\n        }\n    }\n});\n","import { unpack, limit, TWOPI, PITHIRD } from '../../utils/index.js';\nconst { cos } = Math;\n\n/*\n * hue [0..360]\n * saturation [0..1]\n * intensity [0..1]\n */\nconst hsi2rgb = (...args) => {\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n    */\n    args = unpack(args, 'hsi');\n    let [h, s, i] = args;\n    let r, g, b;\n\n    if (isNaN(h)) h = 0;\n    if (isNaN(s)) s = 0;\n    // normalize hue\n    if (h > 360) h -= 360;\n    if (h < 0) h += 360;\n    h /= 360;\n    if (h < 1 / 3) {\n        b = (1 - s) / 3;\n        r = (1 + (s * cos(TWOPI * h)) / cos(PITHIRD - TWOPI * h)) / 3;\n        g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n        h -= 1 / 3;\n        r = (1 - s) / 3;\n        g = (1 + (s * cos(TWOPI * h)) / cos(PITHIRD - TWOPI * h)) / 3;\n        b = 1 - (r + g);\n    } else {\n        h -= 2 / 3;\n        g = (1 - s) / 3;\n        b = (1 + (s * cos(TWOPI * h)) / cos(PITHIRD - TWOPI * h)) / 3;\n        r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n};\n\nexport default hsi2rgb;\n","import { unpack, TWOPI } from '../../utils/index.js';\nconst { min, sqrt, acos } = Math;\n\nconst rgb2hsi = (...args) => {\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n    */\n    let [r, g, b] = unpack(args, 'rgb');\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let h;\n    const min_ = min(r, g, b);\n    const i = (r + g + b) / 3;\n    const s = i > 0 ? 1 - min_ / i : 0;\n    if (s === 0) {\n        h = NaN;\n    } else {\n        h = (r - g + (r - b)) / 2;\n        h /= sqrt((r - g) * (r - g) + (r - b) * (g - b));\n        h = acos(h);\n        if (b > g) {\n            h = TWOPI - h;\n        }\n        h /= TWOPI;\n    }\n    return [h * 360, s, i];\n};\n\nexport default rgb2hsi;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hsi2rgb from './hsi2rgb.js';\nimport rgb2hsi from './rgb2hsi.js';\n\nColor.prototype.hsi = function () {\n    return rgb2hsi(this._rgb);\n};\n\nchroma.hsi = (...args) => new Color(...args, 'hsi');\n\ninput.format.hsi = hsi2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsi');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsi';\n        }\n    }\n});\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hsl2rgb from './hsl2rgb.js';\nimport rgb2hsl from './rgb2hsl.js';\n\nColor.prototype.hsl = function () {\n    return rgb2hsl(this._rgb);\n};\n\nchroma.hsl = (...args) => new Color(...args, 'hsl');\n\ninput.format.hsl = hsl2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsl');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsl';\n        }\n    }\n});\n","import { unpack } from '../../utils/index.js';\nconst { floor } = Math;\n\nconst hsv2rgb = (...args) => {\n    args = unpack(args, 'hsv');\n    let [h, s, v] = args;\n    let r, g, b;\n    v *= 255;\n    if (s === 0) {\n        r = g = b = v;\n    } else {\n        if (h === 360) h = 0;\n        if (h > 360) h -= 360;\n        if (h < 0) h += 360;\n        h /= 60;\n\n        const i = floor(h);\n        const f = h - i;\n        const p = v * (1 - s);\n        const q = v * (1 - s * f);\n        const t = v * (1 - s * (1 - f));\n\n        switch (i) {\n            case 0:\n                [r, g, b] = [v, t, p];\n                break;\n            case 1:\n                [r, g, b] = [q, v, p];\n                break;\n            case 2:\n                [r, g, b] = [p, v, t];\n                break;\n            case 3:\n                [r, g, b] = [p, q, v];\n                break;\n            case 4:\n                [r, g, b] = [t, p, v];\n                break;\n            case 5:\n                [r, g, b] = [v, p, q];\n                break;\n        }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nexport default hsv2rgb;\n","import { unpack } from '../../utils/index.js';\nconst { min, max } = Math;\n\n/*\n * supported arguments:\n * - rgb2hsv(r,g,b)\n * - rgb2hsv([r,g,b])\n * - rgb2hsv({r,g,b})\n */\nconst rgb2hsl = (...args) => {\n    args = unpack(args, 'rgb');\n    let [r, g, b] = args;\n    const min_ = min(r, g, b);\n    const max_ = max(r, g, b);\n    const delta = max_ - min_;\n    let h, s, v;\n    v = max_ / 255.0;\n    if (max_ === 0) {\n        h = Number.NaN;\n        s = 0;\n    } else {\n        s = delta / max_;\n        if (r === max_) h = (g - b) / delta;\n        if (g === max_) h = 2 + (b - r) / delta;\n        if (b === max_) h = 4 + (r - g) / delta;\n        h *= 60;\n        if (h < 0) h += 360;\n    }\n    return [h, s, v];\n};\n\nexport default rgb2hsl;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hsv2rgb from './hsv2rgb.js';\nimport rgb2hsv from './rgb2hsv.js';\n\nColor.prototype.hsv = function () {\n    return rgb2hsv(this._rgb);\n};\n\nchroma.hsv = (...args) => new Color(...args, 'hsv');\n\ninput.format.hsv = hsv2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsv');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsv';\n        }\n    }\n});\n","export default {\n    // Corresponds roughly to RGB brighter/darker\n    Kn: 18,\n\n    // D65 standard referent\n    Xn: 0.95047,\n    Yn: 1,\n    Zn: 1.08883,\n\n    t0: 0.137931034, // 4 / 29\n    t1: 0.206896552, // 6 / 29\n    t2: 0.12841855, // 3 * t1 * t1\n    t3: 0.008856452 // t1 * t1 * t1\n};\n","import LAB_CONSTANTS from './lab-constants.js';\nimport { unpack } from '../../utils/index.js';\nconst { pow } = Math;\n\n/*\n * L* [0..100]\n * a [-100..100]\n * b [-100..100]\n */\nconst lab2rgb = (...args) => {\n    args = unpack(args, 'lab');\n    const [l, a, b] = args;\n    let x, y, z, r, g, b_;\n\n    y = (l + 16) / 116;\n    x = isNaN(a) ? y : y + a / 500;\n    z = isNaN(b) ? y : y - b / 200;\n\n    y = LAB_CONSTANTS.Yn * lab_xyz(y);\n    x = LAB_CONSTANTS.Xn * lab_xyz(x);\n    z = LAB_CONSTANTS.Zn * lab_xyz(z);\n\n    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z); // D65 -> sRGB\n    g = xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z);\n    b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n\n    return [r, g, b_, args.length > 3 ? args[3] : 1];\n};\n\nconst xyz_rgb = (r) => {\n    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\n};\n\nconst lab_xyz = (t) => {\n    return t > LAB_CONSTANTS.t1\n        ? t * t * t\n        : LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\n};\n\nexport default lab2rgb;\n","import LAB_CONSTANTS from './lab-constants.js';\nimport { unpack } from '../../utils/index.js';\nconst { pow } = Math;\n\nconst rgb2lab = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    const [x, y, z] = rgb2xyz(r, g, b);\n    const l = 116 * y - 16;\n    return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];\n};\n\nconst rgb_xyz = (r) => {\n    if ((r /= 255) <= 0.04045) return r / 12.92;\n    return pow((r + 0.055) / 1.055, 2.4);\n};\n\nconst xyz_lab = (t) => {\n    if (t > LAB_CONSTANTS.t3) return pow(t, 1 / 3);\n    return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\n};\n\nconst rgb2xyz = (r, g, b) => {\n    r = rgb_xyz(r);\n    g = rgb_xyz(g);\n    b = rgb_xyz(b);\n    const x = xyz_lab(\n        (0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn\n    );\n    const y = xyz_lab(\n        (0.2126729 * r + 0.7151522 * g + 0.072175 * b) / LAB_CONSTANTS.Yn\n    );\n    const z = xyz_lab(\n        (0.0193339 * r + 0.119192 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn\n    );\n    return [x, y, z];\n};\n\nexport default rgb2lab;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport lab2rgb from './lab2rgb.js';\nimport rgb2lab from './rgb2lab.js';\n\nColor.prototype.lab = function () {\n    return rgb2lab(this._rgb);\n};\n\nchroma.lab = (...args) => new Color(...args, 'lab');\n\ninput.format.lab = lab2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'lab');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'lab';\n        }\n    }\n});\n","import { unpack, DEG2RAD } from '../../utils/index.js';\nconst { sin, cos } = Math;\n\nconst lch2lab = (...args) => {\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n\n    A saturation multiplier was added by Gregor Aisch\n    */\n    let [l, c, h] = unpack(args, 'lch');\n    if (isNaN(h)) h = 0;\n    h = h * DEG2RAD;\n    return [l, cos(h) * c, sin(h) * c];\n};\n\nexport default lch2lab;\n","import { unpack } from '../../utils/index.js';\nimport lch2lab from './lch2lab.js';\nimport lab2rgb from '../lab/lab2rgb.js';\n\nconst lch2rgb = (...args) => {\n    args = unpack(args, 'lch');\n    const [l, c, h] = args;\n    const [L, a, b_] = lch2lab(l, c, h);\n    const [r, g, b] = lab2rgb(L, a, b_);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nexport default lch2rgb;\n","import { unpack } from '../../utils/index.js';\nimport lch2rgb from './lch2rgb.js';\n\nconst hcl2rgb = (...args) => {\n    const hcl = unpack(args, 'hcl').reverse();\n    return lch2rgb(...hcl);\n};\n\nexport default hcl2rgb;\n","import { unpack, RAD2DEG } from '../../utils/index.js';\nconst { sqrt, atan2, round } = Math;\n\nconst lab2lch = (...args) => {\n    const [l, a, b] = unpack(args, 'lab');\n    const c = sqrt(a * a + b * b);\n    let h = (atan2(b, a) * RAD2DEG + 360) % 360;\n    if (round(c * 10000) === 0) h = Number.NaN;\n    return [l, c, h];\n};\n\nexport default lab2lch;\n","import { unpack } from '../../utils/index.js';\nimport rgb2lab from '../lab/rgb2lab.js';\nimport lab2lch from './lab2lch.js';\n\nconst rgb2lch = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    const [l, a, b_] = rgb2lab(r, g, b);\n    return lab2lch(l, a, b_);\n};\n\nexport default rgb2lch;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport lch2rgb from './lch2rgb.js';\nimport hcl2rgb from './hcl2rgb.js';\nimport rgb2lch from './rgb2lch.js';\n\nColor.prototype.lch = function () {\n    return rgb2lch(this._rgb);\n};\nColor.prototype.hcl = function () {\n    return rgb2lch(this._rgb).reverse();\n};\n\nchroma.lch = (...args) => new Color(...args, 'lch');\nchroma.hcl = (...args) => new Color(...args, 'hcl');\n\ninput.format.lch = lch2rgb;\ninput.format.hcl = hcl2rgb;\n['lch', 'hcl'].forEach((m) =>\n    input.autodetect.push({\n        p: 2,\n        test: (...args) => {\n            args = unpack(args, m);\n            if (type(args) === 'array' && args.length === 3) {\n                return m;\n            }\n        }\n    })\n);\n","/**\n\tX11 color names\n\n\thttp://www.w3.org/TR/css3-color/#svg-color\n*/\n\nconst w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n};\n\nexport default w3cx11;\n","import Color from '../../Color.js';\nimport input from '../input.js';\nimport { type } from '../../utils/index.js';\n\nimport w3cx11 from '../../colors/w3cx11.js';\nimport hex2rgb from '../hex/hex2rgb.js';\nimport rgb2hex from '../hex/rgb2hex.js';\n\nColor.prototype.name = function () {\n    const hex = rgb2hex(this._rgb, 'rgb');\n    for (let n of Object.keys(w3cx11)) {\n        if (w3cx11[n] === hex) return n.toLowerCase();\n    }\n    return hex;\n};\n\ninput.format.named = (name) => {\n    name = name.toLowerCase();\n    if (w3cx11[name]) return hex2rgb(w3cx11[name]);\n    throw new Error('unknown color name: ' + name);\n};\n\ninput.autodetect.push({\n    p: 5,\n    test: (h, ...rest) => {\n        if (!rest.length && type(h) === 'string' && w3cx11[h.toLowerCase()]) {\n            return 'named';\n        }\n    }\n});\n","import { type } from '../../utils/index.js';\n\nconst num2rgb = (num) => {\n    if (type(num) == 'number' && num >= 0 && num <= 0xffffff) {\n        const r = num >> 16;\n        const g = (num >> 8) & 0xff;\n        const b = num & 0xff;\n        return [r, g, b, 1];\n    }\n    throw new Error('unknown num color: ' + num);\n};\n\nexport default num2rgb;\n","import { unpack } from '../../utils/index.js';\n\nconst rgb2num = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    return (r << 16) + (g << 8) + b;\n};\n\nexport default rgb2num;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { type } from '../../utils/index.js';\nimport num2rgb from './num2rgb.js';\nimport rgb2num from './rgb2num.js';\n\nColor.prototype.num = function () {\n    return rgb2num(this._rgb);\n};\n\nchroma.num = (...args) => new Color(...args, 'num');\n\ninput.format.num = num2rgb;\n\ninput.autodetect.push({\n    p: 5,\n    test: (...args) => {\n        if (\n            args.length === 1 &&\n            type(args[0]) === 'number' &&\n            args[0] >= 0 &&\n            args[0] <= 0xffffff\n        ) {\n            return 'num';\n        }\n    }\n});\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { unpack, type } from '../../utils/index.js';\nconst { round } = Math;\n\nColor.prototype.rgb = function (rnd = true) {\n    if (rnd === false) return this._rgb.slice(0, 3);\n    return this._rgb.slice(0, 3).map(round);\n};\n\nColor.prototype.rgba = function (rnd = true) {\n    return this._rgb.slice(0, 4).map((v, i) => {\n        return i < 3 ? (rnd === false ? v : round(v)) : v;\n    });\n};\n\nchroma.rgb = (...args) => new Color(...args, 'rgb');\n\ninput.format.rgb = (...args) => {\n    const rgba = unpack(args, 'rgba');\n    if (rgba[3] === undefined) rgba[3] = 1;\n    return rgba;\n};\n\ninput.autodetect.push({\n    p: 3,\n    test: (...args) => {\n        args = unpack(args, 'rgba');\n        if (\n            type(args) === 'array' &&\n            (args.length === 3 ||\n                (args.length === 4 &&\n                    type(args[3]) == 'number' &&\n                    args[3] >= 0 &&\n                    args[3] <= 1))\n        ) {\n            return 'rgb';\n        }\n    }\n});\n","/*\n * Based on implementation by Neil Bartlett\n * https://github.com/neilbartlett/color-temperature\n */\n\nconst { log } = Math;\n\nconst temperature2rgb = (kelvin) => {\n    const temp = kelvin / 100;\n    let r, g, b;\n    if (temp < 66) {\n        r = 255;\n        g =\n            temp < 6\n                ? 0\n                : -155.25485562709179 -\n                  0.44596950469579133 * (g = temp - 2) +\n                  104.49216199393888 * log(g);\n        b =\n            temp < 20\n                ? 0\n                : -254.76935184120902 +\n                  0.8274096064007395 * (b = temp - 10) +\n                  115.67994401066147 * log(b);\n    } else {\n        r =\n            351.97690566805693 +\n            0.114206453784165 * (r = temp - 55) -\n            40.25366309332127 * log(r);\n        g =\n            325.4494125711974 +\n            0.07943456536662342 * (g = temp - 50) -\n            28.0852963507957 * log(g);\n        b = 255;\n    }\n    return [r, g, b, 1];\n};\n\nexport default temperature2rgb;\n","/*\n * Based on implementation by Neil Bartlett\n * https://github.com/neilbartlett/color-temperature\n **/\n\nimport temperature2rgb from './temperature2rgb.js';\nimport { unpack } from '../../utils/index.js';\nconst { round } = Math;\n\nconst rgb2temperature = (...args) => {\n    const rgb = unpack(args, 'rgb');\n    const r = rgb[0],\n        b = rgb[2];\n    let minTemp = 1000;\n    let maxTemp = 40000;\n    const eps = 0.4;\n    let temp;\n    while (maxTemp - minTemp > eps) {\n        temp = (maxTemp + minTemp) * 0.5;\n        const rgb = temperature2rgb(temp);\n        if (rgb[2] / rgb[0] >= b / r) {\n            maxTemp = temp;\n        } else {\n            minTemp = temp;\n        }\n    }\n    return round(temp);\n};\n\nexport default rgb2temperature;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport temperature2rgb from './temperature2rgb.js';\nimport rgb2temperature from './rgb2temperature.js';\n\nColor.prototype.temp =\n    Color.prototype.kelvin =\n    Color.prototype.temperature =\n        function () {\n            return rgb2temperature(this._rgb);\n        };\n\nchroma.temp =\n    chroma.kelvin =\n    chroma.temperature =\n        (...args) => new Color(...args, 'temp');\n\ninput.format.temp =\n    input.format.kelvin =\n    input.format.temperature =\n        temperature2rgb;\n","import { unpack } from '../../utils/index.js';\nconst { pow, sign } = Math;\n\n/*\n * L* [0..100]\n * a [-100..100]\n * b [-100..100]\n */\nconst oklab2rgb = (...args) => {\n    args = unpack(args, 'lab');\n    const [L, a, b] = args;\n\n    const l = pow(L + 0.3963377774 * a + 0.2158037573 * b, 3);\n    const m = pow(L - 0.1055613458 * a - 0.0638541728 * b, 3);\n    const s = pow(L - 0.0894841775 * a - 1.291485548 * b, 3);\n\n    return [\n        255 * lrgb2rgb(+4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s),\n        255 * lrgb2rgb(-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s),\n        255 * lrgb2rgb(-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s),\n        args.length > 3 ? args[3] : 1\n    ];\n};\n\nexport default oklab2rgb;\n\nfunction lrgb2rgb(c) {\n    const abs = Math.abs(c);\n    if (abs > 0.0031308) {\n        return (sign(c) || 1) * (1.055 * pow(abs, 1 / 2.4) - 0.055);\n    }\n    return c * 12.92;\n}\n","import { unpack } from '../../utils/index.js';\nconst { cbrt, pow, sign } = Math;\n\nconst rgb2oklab = (...args) => {\n    // OKLab color space implementation taken from\n    // https://bottosson.github.io/posts/oklab/\n    const [r, g, b] = unpack(args, 'rgb');\n    const [lr, lg, lb] = [\n        rgb2lrgb(r / 255),\n        rgb2lrgb(g / 255),\n        rgb2lrgb(b / 255)\n    ];\n    const l = cbrt(0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb);\n    const m = cbrt(0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb);\n    const s = cbrt(0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb);\n\n    return [\n        0.2104542553 * l + 0.793617785 * m - 0.0040720468 * s,\n        1.9779984951 * l - 2.428592205 * m + 0.4505937099 * s,\n        0.0259040371 * l + 0.7827717662 * m - 0.808675766 * s\n    ];\n};\n\nexport default rgb2oklab;\n\nfunction rgb2lrgb(c) {\n    const abs = Math.abs(c);\n    if (abs < 0.04045) {\n        return c / 12.92;\n    }\n    return (sign(c) || 1) * pow((abs + 0.055) / 1.055, 2.4);\n}\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport oklab2rgb from './oklab2rgb.js';\nimport rgb2oklab from './rgb2oklab.js';\n\nColor.prototype.oklab = function () {\n    return rgb2oklab(this._rgb);\n};\n\nchroma.oklab = (...args) => new Color(...args, 'oklab');\n\ninput.format.oklab = oklab2rgb;\n\ninput.autodetect.push({\n    p: 3,\n    test: (...args) => {\n        args = unpack(args, 'oklab');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'oklab';\n        }\n    }\n});\n","import { unpack } from '../../utils/index.js';\nimport lch2lab from '../lch/lch2lab.js';\nimport oklab2rgb from '../oklab/oklab2rgb.js';\n\nconst oklch2rgb = (...args) => {\n    args = unpack(args, 'lch');\n    const [l, c, h] = args;\n    const [L, a, b_] = lch2lab(l, c, h);\n    const [r, g, b] = oklab2rgb(L, a, b_);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nexport default oklch2rgb;\n","import { unpack } from '../../utils/index.js';\nimport rgb2oklab from '../oklab/rgb2oklab.js';\nimport lab2lch from '../lch/lab2lch.js';\n\nconst rgb2oklch = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    const [l, a, b_] = rgb2oklab(r, g, b);\n    return lab2lch(l, a, b_);\n};\n\nexport default rgb2oklch;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport oklch2rgb from './oklch2rgb.js';\nimport rgb2oklch from './rgb2oklch.js';\n\nColor.prototype.oklch = function () {\n    return rgb2oklch(this._rgb);\n};\n\nchroma.oklch = (...args) => new Color(...args, 'oklch');\n\ninput.format.oklch = oklch2rgb;\n\ninput.autodetect.push({\n    p: 3,\n    test: (...args) => {\n        args = unpack(args, 'oklch');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'oklch';\n        }\n    }\n});\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\n\nColor.prototype.alpha = function (a, mutate = false) {\n    if (a !== undefined && type(a) === 'number') {\n        if (mutate) {\n            this._rgb[3] = a;\n            return this;\n        }\n        return new Color([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n    }\n    return this._rgb[3];\n};\n","import Color from '../Color.js';\n\nColor.prototype.clipped = function () {\n    return this._rgb._clipped || false;\n};\n","import '../io/lab/index.js';\nimport Color from '../Color.js';\nimport LAB_CONSTANTS from '../io/lab/lab-constants.js';\n\nColor.prototype.darken = function (amount = 1) {\n    const me = this;\n    const lab = me.lab();\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\n    return new Color(lab, 'lab').alpha(me.alpha(), true);\n};\n\nColor.prototype.brighten = function (amount = 1) {\n    return this.darken(-amount);\n};\n\nColor.prototype.darker = Color.prototype.darken;\nColor.prototype.brighter = Color.prototype.brighten;\n","import Color from '../Color.js';\n\nColor.prototype.get = function (mc) {\n    const [mode, channel] = mc.split('.');\n    const src = this[mode]();\n    if (channel) {\n        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n        if (i > -1) return src[i];\n        throw new Error(`unknown channel ${channel} in mode ${mode}`);\n    } else {\n        return src;\n    }\n};\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\nconst { pow } = Math;\n\nconst EPS = 1e-7;\nconst MAX_ITER = 20;\n\nColor.prototype.luminance = function (lum, mode = 'rgb') {\n    if (lum !== undefined && type(lum) === 'number') {\n        if (lum === 0) {\n            // return pure black\n            return new Color([0, 0, 0, this._rgb[3]], 'rgb');\n        }\n        if (lum === 1) {\n            // return pure white\n            return new Color([255, 255, 255, this._rgb[3]], 'rgb');\n        }\n        // compute new color using...\n        let cur_lum = this.luminance();\n        let max_iter = MAX_ITER;\n\n        const test = (low, high) => {\n            const mid = low.interpolate(high, 0.5, mode);\n            const lm = mid.luminance();\n            if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                // close enough\n                return mid;\n            }\n            return lm > lum ? test(low, mid) : test(mid, high);\n        };\n\n        const rgb = (\n            cur_lum > lum\n                ? test(new Color([0, 0, 0]), this)\n                : test(this, new Color([255, 255, 255]))\n        ).rgb();\n        return new Color([...rgb, this._rgb[3]]);\n    }\n    return rgb2luminance(...this._rgb.slice(0, 3));\n};\n\nconst rgb2luminance = (r, g, b) => {\n    // relative luminance\n    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n};\n\nconst luminance_x = (x) => {\n    x /= 255;\n    return x <= 0.03928 ? x / 12.92 : pow((x + 0.055) / 1.055, 2.4);\n};\n","export default {};\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\nimport interpolator from '../interpolator/index.js';\n\nexport default (col1, col2, f = 0.5, ...rest) => {\n    let mode = rest[0] || 'lrgb';\n    if (!interpolator[mode] && !rest.length) {\n        // fall back to the first supported mode\n        mode = Object.keys(interpolator)[0];\n    }\n    if (!interpolator[mode]) {\n        throw new Error(`interpolation mode ${mode} is not defined`);\n    }\n    if (type(col1) !== 'object') col1 = new Color(col1);\n    if (type(col2) !== 'object') col2 = new Color(col2);\n    return interpolator[mode](col1, col2, f).alpha(\n        col1.alpha() + f * (col2.alpha() - col1.alpha())\n    );\n};\n","import Color from '../Color.js';\nimport mix from '../generator/mix.js';\n\nColor.prototype.mix = Color.prototype.interpolate = function (\n    col2,\n    f = 0.5,\n    ...rest\n) {\n    return mix(this, col2, f, ...rest);\n};\n","import Color from '../Color.js';\n\nColor.prototype.premultiply = function (mutate = false) {\n    const rgb = this._rgb;\n    const a = rgb[3];\n    if (mutate) {\n        this._rgb = [rgb[0] * a, rgb[1] * a, rgb[2] * a, a];\n        return this;\n    } else {\n        return new Color([rgb[0] * a, rgb[1] * a, rgb[2] * a, a], 'rgb');\n    }\n};\n","import '../io/lch/index.js';\nimport Color from '../Color.js';\nimport LAB_CONSTANTS from '../io/lab/lab-constants.js';\n\nColor.prototype.saturate = function (amount = 1) {\n    const me = this;\n    const lch = me.lch();\n    lch[1] += LAB_CONSTANTS.Kn * amount;\n    if (lch[1] < 0) lch[1] = 0;\n    return new Color(lch, 'lch').alpha(me.alpha(), true);\n};\n\nColor.prototype.desaturate = function (amount = 1) {\n    return this.saturate(-amount);\n};\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\n\nColor.prototype.set = function (mc, value, mutate = false) {\n    const [mode, channel] = mc.split('.');\n    const src = this[mode]();\n    if (channel) {\n        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n        if (i > -1) {\n            if (type(value) == 'string') {\n                switch (value.charAt(0)) {\n                    case '+':\n                        src[i] += +value;\n                        break;\n                    case '-':\n                        src[i] += +value;\n                        break;\n                    case '*':\n                        src[i] *= +value.substr(1);\n                        break;\n                    case '/':\n                        src[i] /= +value.substr(1);\n                        break;\n                    default:\n                        src[i] = +value;\n                }\n            } else if (type(value) === 'number') {\n                src[i] = value;\n            } else {\n                throw new Error(`unsupported value for Color.set`);\n            }\n            const out = new Color(src, mode);\n            if (mutate) {\n                this._rgb = out._rgb;\n                return this;\n            }\n            return out;\n        }\n        throw new Error(`unknown channel ${channel} in mode ${mode}`);\n    } else {\n        return src;\n    }\n};\n","import '../io/lab/index.js';\nimport Color from '../Color.js';\nimport mix from '../generator/mix.js';\n\nColor.prototype.tint = function (f = 0.5, ...rest) {\n    return mix(this, 'white', f, ...rest);\n};\n\nColor.prototype.shade = function (f = 0.5, ...rest) {\n    return mix(this, 'black', f, ...rest);\n};\n","import Color from '../Color.js';\nimport index from './index.js';\n\nconst rgb = (col1, col2, f) => {\n    const xyz0 = col1._rgb;\n    const xyz1 = col2._rgb;\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'rgb'\n    );\n};\n\n// register interpolator\nindex.rgb = rgb;\n\nexport default rgb;\n","import Color from '../Color.js';\nconst { sqrt, pow } = Math;\nimport index from './index.js';\n\nconst lrgb = (col1, col2, f) => {\n    const [x1, y1, z1] = col1._rgb;\n    const [x2, y2, z2] = col2._rgb;\n    return new Color(\n        sqrt(pow(x1, 2) * (1 - f) + pow(x2, 2) * f),\n        sqrt(pow(y1, 2) * (1 - f) + pow(y2, 2) * f),\n        sqrt(pow(z1, 2) * (1 - f) + pow(z2, 2) * f),\n        'rgb'\n    );\n};\n\n// register interpolator\nindex.lrgb = lrgb;\n\nexport default lrgb;\n","import '../io/lab/index.js';\nimport index from './index.js';\nimport Color from '../Color.js';\n\nconst lab = (col1, col2, f) => {\n    const xyz0 = col1.lab();\n    const xyz1 = col2.lab();\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'lab'\n    );\n};\n\n// register interpolator\nindex.lab = lab;\n\nexport default lab;\n","import Color from '../Color.js';\n\nexport default (col1, col2, f, m) => {\n    let xyz0, xyz1;\n    if (m === 'hsl') {\n        xyz0 = col1.hsl();\n        xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n        xyz0 = col1.hsv();\n        xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n        xyz0 = col1.hcg();\n        xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n        xyz0 = col1.hsi();\n        xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n        m = 'hcl';\n        xyz0 = col1.hcl();\n        xyz1 = col2.hcl();\n    } else if (m === 'oklch') {\n        xyz0 = col1.oklch().reverse();\n        xyz1 = col2.oklch().reverse();\n    }\n\n    let hue0, hue1, sat0, sat1, lbv0, lbv1;\n    if (m.substr(0, 1) === 'h' || m === 'oklch') {\n        [hue0, sat0, lbv0] = xyz0;\n        [hue1, sat1, lbv1] = xyz1;\n    }\n\n    let sat, hue, lbv, dh;\n\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n        // both colors have hue\n        if (hue1 > hue0 && hue1 - hue0 > 180) {\n            dh = hue1 - (hue0 + 360);\n        } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n            dh = hue1 + 360 - hue0;\n        } else {\n            dh = hue1 - hue0;\n        }\n        hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n        hue = hue0;\n        if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') sat = sat0;\n    } else if (!isNaN(hue1)) {\n        hue = hue1;\n        if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') sat = sat1;\n    } else {\n        hue = Number.NaN;\n    }\n\n    if (sat === undefined) sat = sat0 + f * (sat1 - sat0);\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return m === 'oklch'\n        ? new Color([lbv, sat, hue], m)\n        : new Color([hue, sat, lbv], m);\n};\n","import '../io/lch/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst lch = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'lch');\n};\n\n// register interpolator\nindex.lch = lch;\nindex.hcl = lch;\n\nexport default lch;\n","import '../io/num/index.js';\nimport index from './index.js';\n\nimport Color from '../Color.js';\n\nconst num = (col1, col2, f) => {\n    const c1 = col1.num();\n    const c2 = col2.num();\n    return new Color(c1 + f * (c2 - c1), 'num');\n};\n\n// register interpolator\nindex.num = num;\n\nexport default num;\n","import '../io/hcg/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hcg = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hcg');\n};\n\n// register interpolator\nindex.hcg = hcg;\n\nexport default hcg;\n","import '../io/hsi/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hsi = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsi');\n};\n\n// register interpolator\nindex.hsi = hsi;\n\nexport default hsi;\n","import '../io/hsl/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hsl = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsl');\n};\n\n// register interpolator\nindex.hsl = hsl;\n\nexport default hsl;\n","import '../io/hsv/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hsv = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsv');\n};\n\n// register interpolator\nindex.hsv = hsv;\n\nexport default hsv;\n","import '../io/oklab/index.js';\nimport index from './index.js';\nimport Color from '../Color.js';\n\nconst oklab = (col1, col2, f) => {\n    const xyz0 = col1.oklab();\n    const xyz1 = col2.oklab();\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'oklab'\n    );\n};\n\n// register interpolator\nindex.oklab = oklab;\n\nexport default oklab;\n","import '../io/lch/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst oklch = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'oklch');\n};\n\n// register interpolator\nindex.oklch = oklch;\n\nexport default oklch;\n","import Color from '../Color.js';\nimport { clip_rgb } from '../utils/index.js';\n\nconst { pow, sqrt, PI, cos, sin, atan2 } = Math;\n\nexport default (colors, mode = 'lrgb', weights = null) => {\n    const l = colors.length;\n    if (!weights) weights = Array.from(new Array(l)).map(() => 1);\n    // normalize weights\n    const k =\n        l /\n        weights.reduce(function (a, b) {\n            return a + b;\n        });\n    weights.forEach((w, i) => {\n        weights[i] *= k;\n    });\n    // convert colors to Color objects\n    colors = colors.map((c) => new Color(c));\n    if (mode === 'lrgb') {\n        return _average_lrgb(colors, weights);\n    }\n    const first = colors.shift();\n    const xyz = first.get(mode);\n    const cnt = [];\n    let dx = 0;\n    let dy = 0;\n    // initial color\n    for (let i = 0; i < xyz.length; i++) {\n        xyz[i] = (xyz[i] || 0) * weights[0];\n        cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n        if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n            const A = (xyz[i] / 180) * PI;\n            dx += cos(A) * weights[0];\n            dy += sin(A) * weights[0];\n        }\n    }\n\n    let alpha = first.alpha() * weights[0];\n    colors.forEach((c, ci) => {\n        const xyz2 = c.get(mode);\n        alpha += c.alpha() * weights[ci + 1];\n        for (let i = 0; i < xyz.length; i++) {\n            if (!isNaN(xyz2[i])) {\n                cnt[i] += weights[ci + 1];\n                if (mode.charAt(i) === 'h') {\n                    const A = (xyz2[i] / 180) * PI;\n                    dx += cos(A) * weights[ci + 1];\n                    dy += sin(A) * weights[ci + 1];\n                } else {\n                    xyz[i] += xyz2[i] * weights[ci + 1];\n                }\n            }\n        }\n    });\n\n    for (let i = 0; i < xyz.length; i++) {\n        if (mode.charAt(i) === 'h') {\n            let A = (atan2(dy / cnt[i], dx / cnt[i]) / PI) * 180;\n            while (A < 0) A += 360;\n            while (A >= 360) A -= 360;\n            xyz[i] = A;\n        } else {\n            xyz[i] = xyz[i] / cnt[i];\n        }\n    }\n    alpha /= l;\n    return new Color(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);\n};\n\nconst _average_lrgb = (colors, weights) => {\n    const l = colors.length;\n    const xyz = [0, 0, 0, 0];\n    for (let i = 0; i < colors.length; i++) {\n        const col = colors[i];\n        const f = weights[i] / l;\n        const rgb = col._rgb;\n        xyz[0] += pow(rgb[0], 2) * f;\n        xyz[1] += pow(rgb[1], 2) * f;\n        xyz[2] += pow(rgb[2], 2) * f;\n        xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    if (xyz[3] > 0.9999999) xyz[3] = 1;\n    return new Color(clip_rgb(xyz));\n};\n","// minimal multi-purpose interface\n\n// @requires utils color analyze\nimport chroma from '../chroma.js';\nimport { limit, type } from '../utils/index.js';\n\nconst { pow } = Math;\n\nexport default function (colors) {\n    // constructor\n    let _mode = 'rgb';\n    let _nacol = chroma('#ccc');\n    let _spread = 0;\n    // const _fixed = false;\n    let _domain = [0, 1];\n    let _pos = [];\n    let _padding = [0, 0];\n    let _classes = false;\n    let _colors = [];\n    let _out = false;\n    let _min = 0;\n    let _max = 1;\n    let _correctLightness = false;\n    let _colorCache = {};\n    let _useCache = true;\n    let _gamma = 1;\n\n    // private methods\n\n    const setColors = function (colors) {\n        colors = colors || ['#fff', '#000'];\n        if (\n            colors &&\n            type(colors) === 'string' &&\n            chroma.brewer &&\n            chroma.brewer[colors.toLowerCase()]\n        ) {\n            colors = chroma.brewer[colors.toLowerCase()];\n        }\n        if (type(colors) === 'array') {\n            // handle single color\n            if (colors.length === 1) {\n                colors = [colors[0], colors[0]];\n            }\n            // make a copy of the colors\n            colors = colors.slice(0);\n            // convert to chroma classes\n            for (let c = 0; c < colors.length; c++) {\n                colors[c] = chroma(colors[c]);\n            }\n            // auto-fill color position\n            _pos.length = 0;\n            for (let c = 0; c < colors.length; c++) {\n                _pos.push(c / (colors.length - 1));\n            }\n        }\n        resetCache();\n        return (_colors = colors);\n    };\n\n    const getClass = function (value) {\n        if (_classes != null) {\n            const n = _classes.length - 1;\n            let i = 0;\n            while (i < n && value >= _classes[i]) {\n                i++;\n            }\n            return i - 1;\n        }\n        return 0;\n    };\n\n    let tMapLightness = (t) => t;\n    let tMapDomain = (t) => t;\n\n    // const classifyValue = function(value) {\n    //     let val = value;\n    //     if (_classes.length > 2) {\n    //         const n = _classes.length-1;\n    //         const i = getClass(value);\n    //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n    //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n    //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n    //     }\n    //     return val;\n    // };\n\n    const getColor = function (val, bypassMap) {\n        let col, t;\n        if (bypassMap == null) {\n            bypassMap = false;\n        }\n        if (isNaN(val) || val === null) {\n            return _nacol;\n        }\n        if (!bypassMap) {\n            if (_classes && _classes.length > 2) {\n                // find the class\n                const c = getClass(val);\n                t = c / (_classes.length - 2);\n            } else if (_max !== _min) {\n                // just interpolate between min/max\n                t = (val - _min) / (_max - _min);\n            } else {\n                t = 1;\n            }\n        } else {\n            t = val;\n        }\n\n        // domain map\n        t = tMapDomain(t);\n\n        if (!bypassMap) {\n            t = tMapLightness(t); // lightness correction\n        }\n\n        if (_gamma !== 1) {\n            t = pow(t, _gamma);\n        }\n\n        t = _padding[0] + t * (1 - _padding[0] - _padding[1]);\n\n        t = limit(t, 0, 1);\n\n        const k = Math.floor(t * 10000);\n\n        if (_useCache && _colorCache[k]) {\n            col = _colorCache[k];\n        } else {\n            if (type(_colors) === 'array') {\n                //for i in [0.._pos.length-1]\n                for (let i = 0; i < _pos.length; i++) {\n                    const p = _pos[i];\n                    if (t <= p) {\n                        col = _colors[i];\n                        break;\n                    }\n                    if (t >= p && i === _pos.length - 1) {\n                        col = _colors[i];\n                        break;\n                    }\n                    if (t > p && t < _pos[i + 1]) {\n                        t = (t - p) / (_pos[i + 1] - p);\n                        col = chroma.interpolate(\n                            _colors[i],\n                            _colors[i + 1],\n                            t,\n                            _mode\n                        );\n                        break;\n                    }\n                }\n            } else if (type(_colors) === 'function') {\n                col = _colors(t);\n            }\n            if (_useCache) {\n                _colorCache[k] = col;\n            }\n        }\n        return col;\n    };\n\n    var resetCache = () => (_colorCache = {});\n\n    setColors(colors);\n\n    // public interface\n\n    const f = function (v) {\n        const c = chroma(getColor(v));\n        if (_out && c[_out]) {\n            return c[_out]();\n        } else {\n            return c;\n        }\n    };\n\n    f.classes = function (classes) {\n        if (classes != null) {\n            if (type(classes) === 'array') {\n                _classes = classes;\n                _domain = [classes[0], classes[classes.length - 1]];\n            } else {\n                const d = chroma.analyze(_domain);\n                if (classes === 0) {\n                    _classes = [d.min, d.max];\n                } else {\n                    _classes = chroma.limits(d, 'e', classes);\n                }\n            }\n            return f;\n        }\n        return _classes;\n    };\n\n    f.domain = function (domain) {\n        if (!arguments.length) {\n            return _domain;\n        }\n        _min = domain[0];\n        _max = domain[domain.length - 1];\n        _pos = [];\n        const k = _colors.length;\n        if (domain.length === k && _min !== _max) {\n            // update positions\n            for (let d of Array.from(domain)) {\n                _pos.push((d - _min) / (_max - _min));\n            }\n        } else {\n            for (let c = 0; c < k; c++) {\n                _pos.push(c / (k - 1));\n            }\n            if (domain.length > 2) {\n                // set domain map\n                const tOut = domain.map((d, i) => i / (domain.length - 1));\n                const tBreaks = domain.map((d) => (d - _min) / (_max - _min));\n                if (!tBreaks.every((val, i) => tOut[i] === val)) {\n                    tMapDomain = (t) => {\n                        if (t <= 0 || t >= 1) return t;\n                        let i = 0;\n                        while (t >= tBreaks[i + 1]) i++;\n                        const f =\n                            (t - tBreaks[i]) / (tBreaks[i + 1] - tBreaks[i]);\n                        const out = tOut[i] + f * (tOut[i + 1] - tOut[i]);\n                        return out;\n                    };\n                }\n            }\n        }\n        _domain = [_min, _max];\n        return f;\n    };\n\n    f.mode = function (_m) {\n        if (!arguments.length) {\n            return _mode;\n        }\n        _mode = _m;\n        resetCache();\n        return f;\n    };\n\n    f.range = function (colors, _pos) {\n        setColors(colors, _pos);\n        return f;\n    };\n\n    f.out = function (_o) {\n        _out = _o;\n        return f;\n    };\n\n    f.spread = function (val) {\n        if (!arguments.length) {\n            return _spread;\n        }\n        _spread = val;\n        return f;\n    };\n\n    f.correctLightness = function (v) {\n        if (v == null) {\n            v = true;\n        }\n        _correctLightness = v;\n        resetCache();\n        if (_correctLightness) {\n            tMapLightness = function (t) {\n                const L0 = getColor(0, true).lab()[0];\n                const L1 = getColor(1, true).lab()[0];\n                const pol = L0 > L1;\n                let L_actual = getColor(t, true).lab()[0];\n                const L_ideal = L0 + (L1 - L0) * t;\n                let L_diff = L_actual - L_ideal;\n                let t0 = 0;\n                let t1 = 1;\n                let max_iter = 20;\n                while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n                    (function () {\n                        if (pol) {\n                            L_diff *= -1;\n                        }\n                        if (L_diff < 0) {\n                            t0 = t;\n                            t += (t1 - t) * 0.5;\n                        } else {\n                            t1 = t;\n                            t += (t0 - t) * 0.5;\n                        }\n                        L_actual = getColor(t, true).lab()[0];\n                        return (L_diff = L_actual - L_ideal);\n                    })();\n                }\n                return t;\n            };\n        } else {\n            tMapLightness = (t) => t;\n        }\n        return f;\n    };\n\n    f.padding = function (p) {\n        if (p != null) {\n            if (type(p) === 'number') {\n                p = [p, p];\n            }\n            _padding = p;\n            return f;\n        } else {\n            return _padding;\n        }\n    };\n\n    f.colors = function (numColors, out) {\n        // If no arguments are given, return the original colors that were provided\n        if (arguments.length < 2) {\n            out = 'hex';\n        }\n        let result = [];\n\n        if (arguments.length === 0) {\n            result = _colors.slice(0);\n        } else if (numColors === 1) {\n            result = [f(0.5)];\n        } else if (numColors > 1) {\n            const dm = _domain[0];\n            const dd = _domain[1] - dm;\n            result = __range__(0, numColors, false).map((i) =>\n                f(dm + (i / (numColors - 1)) * dd)\n            );\n        } else {\n            // returns all colors based on the defined classes\n            colors = [];\n            let samples = [];\n            if (_classes && _classes.length > 2) {\n                for (\n                    let i = 1, end = _classes.length, asc = 1 <= end;\n                    asc ? i < end : i > end;\n                    asc ? i++ : i--\n                ) {\n                    samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n                }\n            } else {\n                samples = _domain;\n            }\n            result = samples.map((v) => f(v));\n        }\n\n        if (chroma[out]) {\n            result = result.map((c) => c[out]());\n        }\n        return result;\n    };\n\n    f.cache = function (c) {\n        if (c != null) {\n            _useCache = c;\n            return f;\n        } else {\n            return _useCache;\n        }\n    };\n\n    f.gamma = function (g) {\n        if (g != null) {\n            _gamma = g;\n            return f;\n        } else {\n            return _gamma;\n        }\n    };\n\n    f.nodata = function (d) {\n        if (d != null) {\n            _nacol = chroma(d);\n            return f;\n        } else {\n            return _nacol;\n        }\n    };\n\n    return f;\n}\n\nfunction __range__(left, right, inclusive) {\n    let range = [];\n    let ascending = left < right;\n    let end = !inclusive ? right : ascending ? right + 1 : right - 1;\n    for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n        range.push(i);\n    }\n    return range;\n}\n","//\n// interpolates between a set of colors uzing a bezier spline\n//\n\n// @requires utils lab\nimport Color from '../Color.js';\nimport '../io/lab/index.js';\nimport scale from './scale.js';\n\n// nth row of the pascal triangle\nconst binom_row = function (n) {\n    let row = [1, 1];\n    for (let i = 1; i < n; i++) {\n        let newrow = [1];\n        for (let j = 1; j <= row.length; j++) {\n            newrow[j] = (row[j] || 0) + row[j - 1];\n        }\n        row = newrow;\n    }\n    return row;\n};\n\nconst bezier = function (colors) {\n    let I, lab0, lab1, lab2;\n    colors = colors.map((c) => new Color(c));\n    if (colors.length === 2) {\n        // linear interpolation\n        [lab0, lab1] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map((i) => lab0[i] + t * (lab1[i] - lab0[i]));\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length === 3) {\n        // quadratic bezier interpolation\n        [lab0, lab1, lab2] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map(\n                (i) =>\n                    (1 - t) * (1 - t) * lab0[i] +\n                    2 * (1 - t) * t * lab1[i] +\n                    t * t * lab2[i]\n            );\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length === 4) {\n        // cubic bezier interpolation\n        let lab3;\n        [lab0, lab1, lab2, lab3] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map(\n                (i) =>\n                    (1 - t) * (1 - t) * (1 - t) * lab0[i] +\n                    3 * (1 - t) * (1 - t) * t * lab1[i] +\n                    3 * (1 - t) * t * t * lab2[i] +\n                    t * t * t * lab3[i]\n            );\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length >= 5) {\n        // general case (degree n bezier)\n        let labs, row, n;\n        labs = colors.map((c) => c.lab());\n        n = colors.length - 1;\n        row = binom_row(n);\n        I = function (t) {\n            const u = 1 - t;\n            const lab = [0, 1, 2].map((i) =>\n                labs.reduce(\n                    (sum, el, j) =>\n                        sum + row[j] * u ** (n - j) * t ** j * el[i],\n                    0\n                )\n            );\n            return new Color(lab, 'lab');\n        };\n    } else {\n        throw new RangeError('No point in running bezier with only one color.');\n    }\n    return I;\n};\n\nexport default (colors) => {\n    const f = bezier(colors);\n    f.scale = () => scale(f);\n    return f;\n};\n","/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from https://web.archive.org/web/20180110014946/http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\nimport '../io/rgb/index.js';\nimport chroma from '../chroma.js';\n\nconst blend = (bottom, top, mode) => {\n    if (!blend[mode]) {\n        throw new Error('unknown blend mode ' + mode);\n    }\n    return blend[mode](bottom, top);\n};\n\nconst blend_f = (f) => (bottom, top) => {\n    const c0 = chroma(top).rgb();\n    const c1 = chroma(bottom).rgb();\n    return chroma.rgb(f(c0, c1));\n};\n\nconst each = (f) => (c0, c1) => {\n    const out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n};\n\nconst normal = (a) => a;\nconst multiply = (a, b) => (a * b) / 255;\nconst darken = (a, b) => (a > b ? b : a);\nconst lighten = (a, b) => (a > b ? a : b);\nconst screen = (a, b) => 255 * (1 - (1 - a / 255) * (1 - b / 255));\nconst overlay = (a, b) =>\n    b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\nconst burn = (a, b) => 255 * (1 - (1 - b / 255) / (a / 255));\nconst dodge = (a, b) => {\n    if (a === 255) return 255;\n    a = (255 * (b / 255)) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n};\n\n// # add = (a,b) ->\n// #     if (a + b > 255) then 255 else a + b\n\nblend.normal = blend_f(each(normal));\nblend.multiply = blend_f(each(multiply));\nblend.screen = blend_f(each(screen));\nblend.overlay = blend_f(each(overlay));\nblend.darken = blend_f(each(darken));\nblend.lighten = blend_f(each(lighten));\nblend.dodge = blend_f(each(dodge));\nblend.burn = blend_f(each(burn));\n// blend.add = blend_f(each(add));\n\nexport default blend;\n","// cubehelix interpolation\n// based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n// http://astron-soc.in/bulletin/11June/289392011.pdf\nimport { type, clip_rgb, TWOPI } from '../utils/index.js';\nimport chroma from '../chroma.js';\nconst { pow, sin, cos } = Math;\n\nexport default function (\n    start = 300,\n    rotations = -1.5,\n    hue = 1,\n    gamma = 1,\n    lightness = [0, 1]\n) {\n    let dh = 0,\n        dl;\n    if (type(lightness) === 'array') {\n        dl = lightness[1] - lightness[0];\n    } else {\n        dl = 0;\n        lightness = [lightness, lightness];\n    }\n    const f = function (fract) {\n        const a = TWOPI * ((start + 120) / 360 + rotations * fract);\n        const l = pow(lightness[0] + dl * fract, gamma);\n        const h = dh !== 0 ? hue[0] + fract * dh : hue;\n        const amp = (h * l * (1 - l)) / 2;\n        const cos_a = cos(a);\n        const sin_a = sin(a);\n        const r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n        const g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n        const b = l + amp * (+1.97294 * cos_a);\n        return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n    };\n    f.start = function (s) {\n        if (s == null) {\n            return start;\n        }\n        start = s;\n        return f;\n    };\n    f.rotations = function (r) {\n        if (r == null) {\n            return rotations;\n        }\n        rotations = r;\n        return f;\n    };\n    f.gamma = function (g) {\n        if (g == null) {\n            return gamma;\n        }\n        gamma = g;\n        return f;\n    };\n    f.hue = function (h) {\n        if (h == null) {\n            return hue;\n        }\n        hue = h;\n        if (type(hue) === 'array') {\n            dh = hue[1] - hue[0];\n            if (dh === 0) {\n                hue = hue[1];\n            }\n        } else {\n            dh = 0;\n        }\n        return f;\n    };\n    f.lightness = function (h) {\n        if (h == null) {\n            return lightness;\n        }\n        if (type(h) === 'array') {\n            lightness = h;\n            dl = h[1] - h[0];\n        } else {\n            lightness = [h, h];\n            dl = 0;\n        }\n        return f;\n    };\n    f.scale = () => chroma.scale(f);\n    f.hue(hue);\n    return f;\n}\n","import Color from '../Color.js';\nconst digits = '0123456789abcdef';\n\nconst { floor, random } = Math;\n\nexport default () => {\n    let code = '#';\n    for (let i = 0; i < 6; i++) {\n        code += digits.charAt(floor(random() * 16));\n    }\n    return new Color(code, 'hex');\n};\n","import type from './type.js';\n\nconst { log, pow, floor, abs } = Math;\n\nexport function analyze(data, key = null) {\n    const r = {\n        min: Number.MAX_VALUE,\n        max: Number.MAX_VALUE * -1,\n        sum: 0,\n        values: [],\n        count: 0\n    };\n    if (type(data) === 'object') {\n        data = Object.values(data);\n    }\n    data.forEach((val) => {\n        if (key && type(val) === 'object') val = val[key];\n        if (val !== undefined && val !== null && !isNaN(val)) {\n            r.values.push(val);\n            r.sum += val;\n            if (val < r.min) r.min = val;\n            if (val > r.max) r.max = val;\n            r.count += 1;\n        }\n    });\n\n    r.domain = [r.min, r.max];\n\n    r.limits = (mode, num) => limits(r, mode, num);\n\n    return r;\n}\n\nexport function limits(data, mode = 'equal', num = 7) {\n    if (type(data) == 'array') {\n        data = analyze(data);\n    }\n    const { min, max } = data;\n    const values = data.values.sort((a, b) => a - b);\n\n    if (num === 1) {\n        return [min, max];\n    }\n\n    const limits = [];\n\n    if (mode.substr(0, 1) === 'c') {\n        // continuous\n        limits.push(min);\n        limits.push(max);\n    }\n\n    if (mode.substr(0, 1) === 'e') {\n        // equal interval\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            limits.push(min + (i / num) * (max - min));\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n        // log scale\n        if (min <= 0) {\n            throw new Error(\n                'Logarithmic scales are only possible for values > 0'\n            );\n        }\n        const min_log = Math.LOG10E * log(min);\n        const max_log = Math.LOG10E * log(max);\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n        // quantile scale\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            const p = ((values.length - 1) * i) / num;\n            const pb = floor(p);\n            if (pb === p) {\n                limits.push(values[pb]);\n            } else {\n                // p > pb\n                const pr = p - pb;\n                limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n            }\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n        // k-means clustering\n        /*\n        implementation based on\n        http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n        simplified for 1-d input values\n        */\n        let cluster;\n        const n = values.length;\n        const assignments = new Array(n);\n        const clusterSizes = new Array(num);\n        let repeat = true;\n        let nb_iters = 0;\n        let centroids = null;\n\n        // get seed values\n        centroids = [];\n        centroids.push(min);\n        for (let i = 1; i < num; i++) {\n            centroids.push(min + (i / num) * (max - min));\n        }\n        centroids.push(max);\n\n        while (repeat) {\n            // assignment step\n            for (let j = 0; j < num; j++) {\n                clusterSizes[j] = 0;\n            }\n            for (let i = 0; i < n; i++) {\n                const value = values[i];\n                let mindist = Number.MAX_VALUE;\n                let best;\n                for (let j = 0; j < num; j++) {\n                    const dist = abs(centroids[j] - value);\n                    if (dist < mindist) {\n                        mindist = dist;\n                        best = j;\n                    }\n                    clusterSizes[best]++;\n                    assignments[i] = best;\n                }\n            }\n\n            // update centroids step\n            const newCentroids = new Array(num);\n            for (let j = 0; j < num; j++) {\n                newCentroids[j] = null;\n            }\n            for (let i = 0; i < n; i++) {\n                cluster = assignments[i];\n                if (newCentroids[cluster] === null) {\n                    newCentroids[cluster] = values[i];\n                } else {\n                    newCentroids[cluster] += values[i];\n                }\n            }\n            for (let j = 0; j < num; j++) {\n                newCentroids[j] *= 1 / clusterSizes[j];\n            }\n\n            // check convergence\n            repeat = false;\n            for (let j = 0; j < num; j++) {\n                if (newCentroids[j] !== centroids[j]) {\n                    repeat = true;\n                    break;\n                }\n            }\n\n            centroids = newCentroids;\n            nb_iters++;\n\n            if (nb_iters > 200) {\n                repeat = false;\n            }\n        }\n\n        // finished k-means clustering\n        // the next part is borrowed from gabrielflor.it\n        const kClusters = {};\n        for (let j = 0; j < num; j++) {\n            kClusters[j] = [];\n        }\n        for (let i = 0; i < n; i++) {\n            cluster = assignments[i];\n            kClusters[cluster].push(values[i]);\n        }\n        let tmpKMeansBreaks = [];\n        for (let j = 0; j < num; j++) {\n            tmpKMeansBreaks.push(kClusters[j][0]);\n            tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n        }\n        tmpKMeansBreaks = tmpKMeansBreaks.sort((a, b) => a - b);\n        limits.push(tmpKMeansBreaks[0]);\n        for (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\n            const v = tmpKMeansBreaks[i];\n            if (!isNaN(v) && limits.indexOf(v) === -1) {\n                limits.push(v);\n            }\n        }\n    }\n    return limits;\n}\n","import Color from '../Color.js';\nimport '../ops/luminance.js';\n\nexport default (a, b) => {\n    // WCAG contrast ratio\n    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n    a = new Color(a);\n    b = new Color(b);\n    const l1 = a.luminance();\n    const l2 = b.luminance();\n    return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n};\n","import Color from '../Color.js';\nconst { sqrt, pow, min, max, atan2, abs, cos, sin, exp, PI } = Math;\n\nexport default function (a, b, Kl = 1, Kc = 1, Kh = 1) {\n    // Delta E (CIE 2000)\n    // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n    var rad2deg = function (rad) {\n        return (360 * rad) / (2 * PI);\n    };\n    var deg2rad = function (deg) {\n        return (2 * PI * deg) / 360;\n    };\n    a = new Color(a);\n    b = new Color(b);\n    const [L1, a1, b1] = Array.from(a.lab());\n    const [L2, a2, b2] = Array.from(b.lab());\n    const avgL = (L1 + L2) / 2;\n    const C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n    const C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n    const avgC = (C1 + C2) / 2;\n    const G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));\n    const a1p = a1 * (1 + G);\n    const a2p = a2 * (1 + G);\n    const C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n    const C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n    const avgCp = (C1p + C2p) / 2;\n    const arctan1 = rad2deg(atan2(b1, a1p));\n    const arctan2 = rad2deg(atan2(b2, a2p));\n    const h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n    const h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n    const avgHp =\n        abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n    const T =\n        1 -\n        0.17 * cos(deg2rad(avgHp - 30)) +\n        0.24 * cos(deg2rad(2 * avgHp)) +\n        0.32 * cos(deg2rad(3 * avgHp + 6)) -\n        0.2 * cos(deg2rad(4 * avgHp - 63));\n    let deltaHp = h2p - h1p;\n    deltaHp =\n        abs(deltaHp) <= 180\n            ? deltaHp\n            : h2p <= h1p\n              ? deltaHp + 360\n              : deltaHp - 360;\n    deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);\n    const deltaL = L2 - L1;\n    const deltaCp = C2p - C1p;\n    const sl = 1 + (0.015 * pow(avgL - 50, 2)) / sqrt(20 + pow(avgL - 50, 2));\n    const sc = 1 + 0.045 * avgCp;\n    const sh = 1 + 0.015 * avgCp * T;\n    const deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));\n    const Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));\n    const Rt = -Rc * sin(2 * deg2rad(deltaTheta));\n    const result = sqrt(\n        pow(deltaL / (Kl * sl), 2) +\n            pow(deltaCp / (Kc * sc), 2) +\n            pow(deltaHp / (Kh * sh), 2) +\n            Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh))\n    );\n    return max(0, min(100, result));\n}\n","import Color from '../Color.js';\n\n// simple Euclidean distance\nexport default function (a, b, mode = 'lab') {\n    // Delta E (CIE 1976)\n    // see http://www.brucelindbloom.com/index.html?Equations.html\n    a = new Color(a);\n    b = new Color(b);\n    const l1 = a.get(mode);\n    const l2 = b.get(mode);\n    let sum_sq = 0;\n    for (let i in l1) {\n        const d = (l1[i] || 0) - (l2[i] || 0);\n        sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n}\n","import Color from '../Color.js';\n\nexport default (...args) => {\n    try {\n        new Color(...args);\n        return true;\n        // eslint-disable-next-line\n    } catch (e) {\n        return false;\n    }\n};\n","// some pre-defined color scales:\nimport chroma from '../chroma.js';\nimport '../io/hsl/index.js';\nimport scale from '../generator/scale.js';\n\nexport default {\n    cool() {\n        return scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);\n    },\n    hot() {\n        return scale(['#000', '#f00', '#ff0', '#fff'], [0, 0.25, 0.75, 1]).mode(\n            'rgb'\n        );\n    }\n};\n","/**\n    ColorBrewer colors for chroma.js\n\n    Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n    Pennsylvania State University.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software distributed\n    under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n    CONDITIONS OF ANY KIND, either express or implied. See the License for the\n    specific language governing permissions and limitations under the License.\n*/\n\nconst colorbrewer = {\n    // sequential\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n    // diverging\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n    // qualitative\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n};\n\n// add lowercase aliases for case-insensitive matches\nfor (let key of Object.keys(colorbrewer)) {\n    colorbrewer[key.toLowerCase()] = colorbrewer[key];\n}\n\nexport default colorbrewer;\n","import chroma from './src/chroma.js';\n\n// feel free to comment out anything to rollup\n// a smaller chroma.js built\n\n// io --> convert colors\nimport './src/io/cmyk/index.js';\nimport './src/io/css/index.js';\nimport './src/io/gl/index.js';\nimport './src/io/hcg/index.js';\nimport './src/io/hex/index.js';\nimport './src/io/hsi/index.js';\nimport './src/io/hsl/index.js';\nimport './src/io/hsv/index.js';\nimport './src/io/lab/index.js';\nimport './src/io/lch/index.js';\nimport './src/io/named/index.js';\nimport './src/io/num/index.js';\nimport './src/io/rgb/index.js';\nimport './src/io/temp/index.js';\nimport './src/io/oklab/index.js';\nimport './src/io/oklch/index.js';\n\n// operators --> modify existing Colors\nimport './src/ops/alpha.js';\nimport './src/ops/clipped.js';\nimport './src/ops/darken.js';\nimport './src/ops/get.js';\nimport './src/ops/luminance.js';\nimport './src/ops/mix.js';\nimport './src/ops/premultiply.js';\nimport './src/ops/saturate.js';\nimport './src/ops/set.js';\nimport './src/ops/shade.js';\n\n// interpolators\nimport './src/interpolator/rgb.js';\nimport './src/interpolator/lrgb.js';\nimport './src/interpolator/lab.js';\nimport './src/interpolator/lch.js';\nimport './src/interpolator/num.js';\nimport './src/interpolator/hcg.js';\nimport './src/interpolator/hsi.js';\nimport './src/interpolator/hsl.js';\nimport './src/interpolator/hsv.js';\nimport './src/interpolator/oklab.js';\nimport './src/interpolator/oklch.js';\n\n// generators -- > create new colors\nimport average from './src/generator/average.js';\nimport bezier from './src/generator/bezier.js';\nimport blend from './src/generator/blend.js';\nimport cubehelix from './src/generator/cubehelix.js';\nimport mix from './src/generator/mix.js';\nimport random from './src/generator/random.js';\nimport scale from './src/generator/scale.js';\n\n// other utility methods\nimport { analyze } from './src/utils/analyze.js';\nimport contrast from './src/utils/contrast.js';\nimport deltaE from './src/utils/delta-e.js';\nimport distance from './src/utils/distance.js';\nimport { limits } from './src/utils/analyze.js';\nimport valid from './src/utils/valid.js';\nimport input from './src/io/input.js';\n\n// scale\nimport scales from './src/utils/scales.js';\n\n// colors\nimport colors from './src/colors/w3cx11.js';\nimport brewer from './src/colors/colorbrewer.js';\n\nObject.assign(chroma, {\n    average,\n    bezier,\n    blend,\n    cubehelix,\n    mix,\n    interpolate: mix,\n    random,\n    scale,\n    analyze,\n    contrast,\n    deltaE,\n    distance,\n    limits,\n    valid,\n    scales,\n    input,\n    colors,\n    brewer\n});\n\nexport default chroma;\n","/*\n * colorbrewer.js\n *\n * Colorbrewer colors, by Cindy Brewer\n */\n\nexport default {\n  YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n  YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n  GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n  BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n  PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n  PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n  BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n  RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n  PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n  OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n  YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n  YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n  Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n  Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n  Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n  Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n  Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n  Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n  PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n  BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n  PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n  PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n  RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n  RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n  RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n  Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n  RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837']\n}\n","/* globals document, ImageData */\n\nconst parseFont = require('./lib/parse-font')\n\nexports.parseFont = parseFont\n\nexports.createCanvas = function (width, height) {\n  return Object.assign(document.createElement('canvas'), { width: width, height: height })\n}\n\nexports.createImageData = function (array, width, height) {\n  // Browser implementation of ImageData looks at the number of arguments passed\n  switch (arguments.length) {\n    case 0: return new ImageData()\n    case 1: return new ImageData(array)\n    case 2: return new ImageData(array, width)\n    default: return new ImageData(array, width, height)\n  }\n}\n\nexports.loadImage = function (src, options) {\n  return new Promise(function (resolve, reject) {\n    const image = Object.assign(document.createElement('img'), options)\n\n    function cleanup () {\n      image.onload = null\n      image.onerror = null\n    }\n\n    image.onload = function () { cleanup(); resolve(image) }\n    image.onerror = function () { cleanup(); reject(new Error('Failed to load the image \"' + src + '\"')) }\n\n    image.src = src\n  })\n}\n","export default function (ctx) {\n  // adapted from https://gist.github.com/callumlocke/cc258a193839691f60dd\n  const backingStoreRatio = (\n    ctx.webkitBackingStorePixelRatio ||\n    ctx.mozBackingStorePixelRatio ||\n    ctx.msBackingStorePixelRatio ||\n    ctx.oBackingStorePixelRatio ||\n    ctx.backingStorePixelRatio || 1\n  )\n\n  const devicePixelRatio = (typeof window !== 'undefined' && window.devicePixelRatio) || 1\n  const drawRatio = devicePixelRatio / backingStoreRatio\n  return drawRatio\n}\n","import { createCanvas } from 'canvas' // this is a simple shim in browsers\nimport getScalingRatio from './utils/getScalingRatio'\nconst isBrowser = (typeof window !== 'undefined' && typeof document !== 'undefined')\nconst doc = isBrowser && document\n\n// utility for building up SVG node trees with the DOM API\nconst sDOM = (tagName, attrs = {}, children, existingRoot) => {\n  const elem = existingRoot || doc.createElementNS('http://www.w3.org/2000/svg', tagName)\n  Object.keys(attrs).forEach(\n    k => attrs[k] !== undefined && elem.setAttribute(k, attrs[k])\n  )\n  children && children.forEach(c => elem.appendChild(c))\n  return elem\n}\n\n// serialize attrs object to XML attributes. Assumes everything is already\n// escaped (safe input).\nconst serializeAttrs = attrs => (\n  Object.entries(attrs)\n    .filter(([_, v]) => v !== undefined)\n    .map(([k, v]) => `${k}='${v}'`)\n    .join(' ')\n)\n\n// minimal XML-tree builder for use in Node\nconst sNode = (tagName, attrs = {}, children) => ({\n  tagName,\n  attrs,\n  children,\n  toString: () => `<${tagName} ${serializeAttrs(attrs)}>${children ? children.join('') : ''}</${tagName}>`\n})\n\nexport default class Pattern {\n  constructor (points, polys, opts) {\n    this.points = points\n    this.polys = polys\n    this.opts = opts\n  }\n\n  _toSVG = (serializer, destSVG, _svgOpts = {}) => {\n    const s = serializer\n    const defaultSVGOptions = { includeNamespace: true, coordinateDecimals: 1 }\n    const svgOpts = { ...defaultSVGOptions, ..._svgOpts }\n    const { points, opts, polys } = this\n    const { width, height } = opts\n\n    // only round points if the coordinateDecimals option is non-negative\n    // set coordinateDecimals to -1 to disable point rounding\n    const roundedPoints = (svgOpts.coordinateDecimals < 0) ? points : points.map(\n      p => p.map(x => +x.toFixed(svgOpts.coordinateDecimals))\n    )\n\n    const paths = polys.map((poly) => {\n      const xys = poly.vertexIndices.map(i => `${roundedPoints[i][0]},${roundedPoints[i][1]}`)\n      const d = 'M' + xys.join('L') + 'Z'\n      const hasStroke = opts.strokeWidth > 0\n      // shape-rendering crispEdges resolves the antialiasing issues, at the\n      // potential cost of some visual degradation. For the best performance\n      // *and* best visual rendering, use Canvas.\n      return s('path', {\n        d,\n        fill: opts.fill ? poly.color.css() : undefined,\n        stroke: hasStroke ? poly.color.css() : undefined,\n        'stroke-width': hasStroke ? opts.strokeWidth : undefined,\n        'stroke-linejoin': hasStroke ? 'round' : undefined,\n        'shape-rendering': opts.fill ? 'crispEdges' : undefined\n      })\n    })\n\n    const svg = s(\n      'svg',\n      {\n        xmlns: svgOpts.includeNamespace ? 'http://www.w3.org/2000/svg' : undefined,\n        width,\n        height\n      },\n      paths,\n      destSVG\n    )\n\n    return svg\n  }\n\n  toSVGTree = (svgOpts) => this._toSVG(sNode, null, svgOpts)\n\n  toSVG = isBrowser\n    ? (destSVG, svgOpts) => this._toSVG(sDOM, destSVG, svgOpts)\n    : (destSVG, svgOpts) => this.toSVGTree(svgOpts)\n\n  toCanvas = (destCanvas, _canvasOpts = {}) => {\n    const defaultCanvasOptions = {\n      scaling: isBrowser ? 'auto' : false,\n      applyCssScaling: !!isBrowser\n    }\n    const canvasOpts = { ...defaultCanvasOptions, ..._canvasOpts }\n    const { points, polys, opts } = this\n\n    const canvas = destCanvas || createCanvas(opts.width, opts.height) // doc.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n\n    if (canvasOpts.scaling) {\n      const drawRatio = canvasOpts.scaling === 'auto'\n        ? getScalingRatio(ctx)\n        : canvasOpts.scaling\n\n      if (drawRatio !== 1) {\n        // set the 'real' canvas size to the higher width/height\n        canvas.width = opts.width * drawRatio\n        canvas.height = opts.height * drawRatio\n\n        if (canvasOpts.applyCssScaling) {\n          // ...then scale it back down with CSS\n          canvas.style.width = opts.width + 'px'\n          canvas.style.height = opts.height + 'px'\n        }\n      } else {\n        // this is a normal 1:1 device: don't apply scaling\n        canvas.width = opts.width\n        canvas.height = opts.height\n        if (canvasOpts.applyCssScaling) {\n          canvas.style.width = ''\n          canvas.style.height = ''\n        }\n      }\n      ctx.scale(drawRatio, drawRatio)\n    }\n\n    const drawPoly = (poly, fill, stroke) => {\n      const vertexIndices = poly.vertexIndices\n      ctx.lineJoin = 'round'\n      ctx.beginPath()\n      ctx.moveTo(points[vertexIndices[0]][0], points[vertexIndices[0]][1])\n      ctx.lineTo(points[vertexIndices[1]][0], points[vertexIndices[1]][1])\n      ctx.lineTo(points[vertexIndices[2]][0], points[vertexIndices[2]][1])\n      ctx.closePath()\n      if (fill) {\n        ctx.fillStyle = fill.color.css()\n        ctx.fill()\n      }\n      if (stroke) {\n        ctx.strokeStyle = stroke.color.css()\n        ctx.lineWidth = stroke.width\n        ctx.stroke()\n      }\n    }\n\n    if (opts.fill && opts.strokeWidth < 1) {\n      // draw background strokes at edge bounds to solve for white gaps due to\n      // canvas antialiasing. See https://stackoverflow.com/q/19319963/381299\n      polys.forEach(poly => drawPoly(poly, null, { color: poly.color, width: 2 }))\n    }\n\n    // draw visible fills and strokes\n    polys.forEach(poly => drawPoly(\n      poly,\n      opts.fill && { color: poly.color },\n      (opts.strokeWidth > 0) && { color: poly.color, width: opts.strokeWidth }\n    ))\n\n    return canvas\n  }\n}\n","// Fast seeded RNG adapted from the public-domain implementation\n// by @byrc: https://github.com/bryc/code/blob/master/jshash/PRNGs.md\n//\n// Usage:\n// const randFn = mulberry32('string seed')\n// const randomNumber = randFn() // [0, 1] random float\nexport default function mulberry32 (seed) {\n  if (!seed) { seed = Math.random().toString(36) } // support no-seed usage\n  var a = xmur3(seed)()\n  return function () {\n    a |= 0; a = a + 0x6D2B79F5 | 0\n    var t = Math.imul(a ^ a >>> 15, 1 | a)\n    t = t + Math.imul(t ^ t >>> 7, 61 | t) ^ t\n    return ((t ^ t >>> 14) >>> 0) / 4294967296\n  }\n}\n\nfunction xmur3 (str) {\n  for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++) {\n    h = Math.imul(h ^ str.charCodeAt(i), 3432918353)\n    h = h << 13 | h >>> 19\n  }\n  return function () {\n    h = Math.imul(h ^ h >>> 16, 2246822507)\n    h = Math.imul(h ^ h >>> 13, 3266489909)\n    return (h ^= h >>> 16) >>> 0\n  }\n}\n","// Given an array of coordinates representing a triangle, find the centroid\n// of the triangle and return it as an {x, y} object\n// Accepts a single [[x, y], [x, y], [x, y]] argument\nexport const getCentroid = d => {\n  return {\n    x: (d[0][0] + d[1][0] + d[2][0]) / 3,\n    y: (d[0][1] + d[1][1] + d[2][1]) / 3\n  }\n}\n\nexport const getTopmostVertexIndex = (vertexIndices, points) => (\n  vertexIndices.reduce(\n    (topmost, i) => (points[i][1] < points[topmost][1] ? i : topmost),\n    vertexIndices[0]\n  )\n)\n","import chroma from 'chroma-js'\n// Built in color functions provided for your convenience.\n//\n// Usage example:\n//\n// const pattern = trianglify({\n//  width: 300,\n//  height: 200,\n//  colorFunction: trianglify.colorFunctions.sparkle(0.2)\n// })\n//\n// the snippet above gives you a trianglify pattern with a 20% random\n// jitter applied to the x and y gradient scales\n\n// Linear interpolation of two gradients, one for the x and one for the y\n// axis. This is the default Trianglify color function.\n// The bias parameter controls how prevalent the y axis is versus the x axis\nexport const interpolateLinear = (bias = 0.5) =>\n  ({ xPercent, yPercent, xScale, yScale, opts }) =>\n    chroma.mix(xScale(xPercent), yScale(yPercent), bias, opts.colorSpace)\n\n// Give the pattern a 'sparkle' effect by introducing random noise into the\n// x and y gradients, making for higher contrast between cells.\nexport const sparkle = (jitterFactor = 0.15) =>\n  ({ xPercent, yPercent, xScale, yScale, opts, random }) => {\n    const jitter = () => (random() - 0.5) * jitterFactor\n    const a = xScale(xPercent + jitter())\n    const b = yScale(yPercent + jitter())\n    return chroma.mix(a, b, 0.5, opts.colorSpace)\n  }\n\n// This is similar to the sparkle effect, but instead of swapping colors around\n// it darkens cells by a random amount. The shadowIntensity parameter controls\n// how dark the darkest shadows are.\nexport const shadows = (shadowIntensity = 0.8) => {\n  return ({ xPercent, yPercent, xScale, yScale, opts, random }) => {\n    const a = xScale(xPercent)\n    const b = yScale(yPercent)\n    const color = chroma.mix(a, b, 0.5, opts.colorSpace)\n    return color.darken(shadowIntensity * random())\n  }\n}\n","/*\n * Trianglify.js\n * by @qrohlf\n *\n * Licensed under the GPLv3\n */\n\nimport Delaunator from 'delaunator'\n// TODO - evaluate smaller alternatives\n// (chroma bloats bundle by 40k, minified)\nimport chroma from 'chroma-js'\n\nimport colorbrewer from './utils/colorbrewer'\nimport Pattern from './pattern'\nimport mulberry32 from './utils/mulberry32'\nimport * as geom from './utils/geom'\nimport * as colorFunctions from './utils/colorFunctions'\n\nconst defaultOptions = {\n  width: 600,\n  height: 400,\n  cellSize: 75,\n  variance: 0.75,\n  seed: null,\n  xColors: 'random',\n  yColors: 'match',\n  palette: colorbrewer,\n  colorSpace: 'lab',\n  colorFunction: colorFunctions.interpolateLinear(0.5),\n  fill: true,\n  strokeWidth: 0,\n  points: null\n}\n\n// This function does the \"core\" render-independent work:\n//\n// 1. Parse and munge options\n// 2. Setup cell geometry\n// 3. Generate random points within cell geometry\n// 4. Use the Delaunator library to run the triangulation\n// 5. Do color interpolation to establish the fundamental coloring of the shapes\nexport default function trianglify (_opts = {}) {\n  Object.keys(_opts).forEach(k => {\n    if (defaultOptions[k] === undefined) {\n      throw TypeError(`Unrecognized option: ${k}`)\n    }\n  })\n  const opts = { ...defaultOptions, ..._opts }\n\n  if (!(opts.height > 0)) {\n    throw TypeError(`invalid height: ${opts.height}`)\n  }\n  if (!(opts.width > 0)) {\n    throw TypeError(`invalid width: ${opts.width}`)\n  }\n\n  // standard randomizer, used for point gen and layout\n  const rand = mulberry32(opts.seed)\n\n  const randomFromPalette = () => {\n    if (opts.palette instanceof Array) {\n      return opts.palette[Math.floor(rand() * opts.palette.length)]\n    }\n    const keys = Object.keys(opts.palette)\n    return opts.palette[keys[Math.floor(rand() * keys.length)]]\n  }\n\n  // The first step here is to set up our color scales for the X and Y axis.\n  // First, munge the shortcut options like 'random' or 'match' into real color\n  // arrays. Then, set up a Chroma scale in the appropriate color space.\n  const processColorOpts = (colorOpt) => {\n    switch (true) {\n      case Array.isArray(colorOpt):\n        return colorOpt\n      case !!opts.palette[colorOpt]:\n        return opts.palette[colorOpt]\n      case colorOpt === 'random':\n        return randomFromPalette()\n      default:\n        throw TypeError(`Unrecognized color option: ${colorOpt}`)\n    }\n  }\n\n  const xColors = processColorOpts(opts.xColors)\n  const yColors = opts.yColors === 'match'\n    ? xColors\n    : processColorOpts(opts.yColors)\n\n  const xScale = chroma.scale(xColors).mode(opts.colorSpace)\n  const yScale = chroma.scale(yColors).mode(opts.colorSpace)\n\n  // Our next step is to generate a pseudo-random grid of {x, y} points,\n  // (or to simply utilize the points that were passed to us)\n  const points = opts.points || getPoints(opts, rand)\n\n  // Once we have the points array, run the triangulation\n  var geomIndices = Delaunator.from(points).triangles\n  // ...and then generate geometry and color data:\n\n  // use a different (salted) randomizer for the color function so that\n  // swapping out color functions doesn't change the pattern geometry itself\n  const salt = 42\n  const cRand = mulberry32(opts.seed ? opts.seed + salt : null)\n  const polys = []\n\n  for (let i = 0; i < geomIndices.length; i += 3) {\n    // convert shallow array-packed vertex indices into 3-tuples\n    const vertexIndices = [\n      geomIndices[i],\n      geomIndices[i + 1],\n      geomIndices[i + 2]\n    ]\n\n    // grab a copy of the actual vertices to use for calculations\n    const vertices = vertexIndices.map(i => points[i])\n\n    const { width, height } = opts\n    const norm = num => Math.max(0, Math.min(1, num))\n    const centroid = geom.getCentroid(vertices)\n    const xPercent = norm(centroid.x / width)\n    const yPercent = norm(centroid.y / height)\n\n    const color = opts.colorFunction({\n      centroid, // centroid of polygon, non-normalized\n      xPercent, // x-coordinate of centroid, normalized to [0, 1]\n      yPercent, // y-coordinate of centroid, normalized to [0, 1]\n      vertexIndices, // vertex indices of the polygon\n      vertices, // [x, y] vertices of the polygon\n      xScale, // x-colors scale for the pattern\n      yScale, // y-colors scale for the pattern\n      points, // array of generated points for the pattern\n      opts, // options used to initialize the pattern\n      random: cRand // seeded randomization function for use by color functions\n    })\n\n    polys.push({\n      vertexIndices,\n      centroid,\n      color // chroma color object\n    })\n  }\n\n  return new Pattern(points, polys, opts)\n}\n\nconst getPoints = (opts, random) => {\n  const { width, height, cellSize, variance } = opts\n\n  // pad by 2 cells outside the visible area on each side to ensure we fully\n  // cover the 'artboard'\n  const colCount = Math.floor(width / cellSize) + 4\n  const rowCount = Math.floor(height / cellSize) + 4\n\n  // determine bleed values to ensure that the grid is centered within the\n  // artboard\n  const bleedX = ((colCount * cellSize) - width) / 2\n  const bleedY = ((rowCount * cellSize) - height) / 2\n\n  // apply variance to cellSize to get cellJitter in pixels\n  const cellJitter = cellSize * variance\n  const getJitter = () => (random() - 0.5) * cellJitter\n\n  const pointCount = colCount * rowCount\n\n  const halfCell = cellSize / 2\n\n  const points = Array(pointCount).fill(null).map((_, i) => {\n    const col = i % colCount\n    const row = Math.floor(i / colCount)\n\n    // [x, y, z]\n    return [\n      -bleedX + col * cellSize + halfCell + getJitter(),\n      -bleedY + row * cellSize + halfCell + getJitter()\n    ]\n  })\n\n  return points\n}\n\n// tweak some of the exports here\ntrianglify.utils = {\n  mix: chroma.mix,\n  colorbrewer\n}\n\ntrianglify.colorFunctions = colorFunctions\ntrianglify.Pattern = Pattern\ntrianglify.defaultOptions = defaultOptions\n"],"names":["n","min","max","rgb","PI","_input","rgb2hsl","round","hsl","floor","u","cos","sqrt","rgb2hsv","pow","sin","atan2","num","rnd","log","sign","abs","lab","interpolator","lch","colors","f","_pos","sum","limits","dist","C1","C2","colorbrewer","bezier","random","brewer","colorFunctions.interpolateLinear","i","geom.getCentroid"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100]}